import logging
log = logging.getLogger(__name__)

from functools import partial

import pandas as pd

from enaml.core.api import Conditional
from enaml.widgets.api import Container, DockItem
from enaml.workbench.api import Extension
from psi.core.enaml.api import DataFrameTable, PSIDockItem, PSIManifest
from psi.data.api import FFTContainer, ResultPlot, TimeContainer, ViewBox


def plot_chirp_result(workbench, manifest, event):
    data = workbench.get_plugin('psi.data')
    vb = data.find_viewbox(manifest.contribution.name)

    norm_spl = manifest.contribution.result['calibration']['norm_spl'].dropna()
    for (s, m), n_spl in norm_spl.groupby(['ao_channel', 'channel']):
        label = f'{s} ({m})'
        vb.plot(n_spl.index.get_level_values('frequency'), n_spl.values,
                log_x=True, label=label)


enamldef ChirpCalibrateManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.plots'
        point = 'psi.data.plots'

        Conditional:
            condition << manifest.contribution.show_widget

            FFTContainer:
                freq_lb = 5000
                freq_ub = 50000

                initialized ::
                    cb = partial(plot_chirp_result, workbench, manifest)
                    manifest.contribution.observe('result', cb)

                name = manifest.contribution.name + '.result'
                label = manifest.contribution.label + ' results'

                ViewBox: vb:
                    y_min = 60
                    y_max = 160
                    name = manifest.contribution.name


enamldef BaseCalibrateManifest(PSIManifest): manifest:

    attr column_info

    Extension:
        id = manifest.id + '.view'
        point = 'psi.experiment.workspace'

        Conditional:
            condition << manifest.contribution.show_widget

            PSIDockItem:
                name << manifest.contribution.name + '.result'
                title << manifest.contribution.label + ' result'
                Container:
                    DataFrameTable: table:
                        data << manifest.contribution.result \
                            .get('calibration', pd.DataFrame()).reset_index()
                        column_info << manifest.column_info
                        columns << list(manifest.column_info.keys())


enamldef ToneCalibrateManifest(BaseCalibrateManifest): manifest:

    column_info = {
        'ao_channel': {'label': 'Channel'},
        'frequency': {'label': 'Freq. (Hz)', 'to_string': '{:.0f}'.format, 'width': 30},
        'norm_spl': {'label': 'SPL (1 Vrms)', 'to_string': '{:.0f}'.format, 'width': 30},
        'snr': {'label': 'SNR (dB)', 'to_string': '{:.0f}'.format, 'width': 30},
        'thd': {'label': 'THD (%)', 'to_string': '{:.0f}'.format, 'width': 30},
    }
