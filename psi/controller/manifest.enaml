import logging
log = logging.getLogger(__name__)

import enaml
from enaml.application import deferred_call
from enaml.core.api import Conditional
from enaml.layout.api import spacer
from enaml.widgets.api import (Action, Container, HGroup, Label, PopupView,
                               PushButton, ToolBar)
from enaml.workbench.api import Extension, ExtensionPoint, PluginManifest
from enaml.workbench.core.api import Command
from enaml.workbench.ui.api import ActionItem, Branding, MenuItem

from ..util import get_tagged_values, rpc

from .plugin import ControllerPlugin
from .experiment_action import (ExperimentState, ExperimentEvent,
                                ExperimentAction)

from psi.core.enaml.api import ExperimentManifest


def accumulate_actions(plugin):
    accumulator = {}
    for action in plugin._actions:
        a = accumulator.setdefault(action.event, [])
        info = '{} (weight={})'.format(action, action.weight)
        a.append(info)
    lines = []
    for event, actions in accumulator.items():
        lines.append(event)
        for action in actions:
            lines.append('  ' + action)
    return lines


def log_actions(event):
    plugin = event.workbench.get_plugin('psi.controller')
    log_with_header('Configured actions', accumulate_actions(plugin))


def log_events(event):
    plugin = event.workbench.get_plugin('psi.controller')
    events = {}
    max_base = 0
    for e in sorted(plugin._events):
        base, extra = e.split('_', 1)
        max_base = max(len(base), max_base)
        events.setdefault(base, []).append(extra)

    lines = []
    for event_base, event_list in events.items():
        event_list = ','.join(event_list)
        event_base = event_base.ljust(max_base)
        lines.append(f" * {event_base}_{{{event_list}}}")
    log_with_header('Available events', lines)


def accumulate_io_tree(plugin):
    accumulator = ['Output']
    for channel in plugin.get_channels(direction='output'):
        _accumulate_io_tree(accumulator, channel, 'outputs', prefix='')
    accumulator.append('Input')
    for channel in plugin.get_channels(direction='input'):
        _accumulate_io_tree(accumulator, channel, 'inputs', prefix='')
    return accumulator


def _accumulate_io_tree(accumulator, obj, direction, prefix=''):
    md = get_tagged_values(obj, 'metadata')
    exclude = {'engine', 'outputs', 'inputs', 'channel', 'source_name',
               'calibration', 'source', 'force_active', 'unit', 'dtype'}
    md_string = ', '.join(f'{k}={v}' for k, v in md.items() if k not in exclude)
    accumulator.append(f'{prefix} * {obj._default_name()} ({md_string})')
    for i in getattr(obj, direction, []):
        _accumulate_io_tree(accumulator, i, direction, f'{prefix} |')


def log_io(event):
    plugin = event.workbench.get_plugin('psi.controller')
    log_with_header('IO configuration', accumulate_io_tree(plugin))


def log_commands(event):
    plugin = event.workbench.get_plugin('enaml.workbench.core')
    commands = [f' * {s}' for s in sorted(plugin._commands.keys())]
    log_with_header('Available commands', commands)


def log_with_header(header, info):
    '''
    Parameters
    ----------
    header : str
        Title to show in header
    info : sequence
        List or tuple of strings (one string per line) to put in the logging
        message.

    Utility function to log multiple lines with a header.
    '''
    hline = '*' * 80
    text = f'* {header.ljust(76)} *'
    header = '\n'.join([hline, text, hline])
    info = '\n'.join(info)
    log.info(f'\n{header}\n{info}')


def start_experiment(event):
    controller = event.workbench.get_plugin('psi.controller')
    controller.start_experiment()


def stop_experiment(event):
    # Todo: this does not capture *everything* possible (e.g., stopping
    # experiment leads to a cascade of actions).
    error_message = event.parameters.get('error_message', '')
    stop_reason = event.parameters.get('stop_reason', '')
    skip_errors = event.parameters.get('skip_errors', True)
    controller = event.workbench.get_plugin('psi.controller')
    results = set(controller.stop_experiment(skip_errors=skip_errors))
    mesg = '\n'.join(r.strip() for r in results if r is not None)
    controller._wrapup(message=mesg, stop_reason=stop_reason,
                       error_message=error_message)


enamldef ResultPopup(PopupView): popup:

    close_on_click = False

    attr error_message = ''
    attr message = ''

    Container:
        Conditional:
            condition = bool(error_message)
            Label:
                text = error_message
        Conditional:
            condition = bool(message)
            Label:
                text = message
        HGroup:
            leading_spacer = spacer(0)
            padding = 0
            spacing = 0
            PushButton:
                text = 'OK'
                clicked ::
                    popup.close()


def show_results(message, stop_reason, error_message):
    if message or error_message:
        view = ResultPopup(message=message, error_message=error_message)
        # There is no guarantee show_results will be invoked in the main
        # process, so anything GUI related needs to be scheduled on the main
        # process via deferred_call.
        deferred_call(view.show)


def invoke_actions(event):
    controller = event.workbench.get_plugin('psi.controller')
    event_name = event.parameters['event_name']
    timestamp = event.parameters['timestamp']
    controller.invoke_actions(event_name, timestamp)


def get_hw_ao_choices(workbench):
    plugin = workbench.get_plugin('psi.controller')
    channels = plugin.get_channels('analog', 'output', 'hardware', False)
    return {f'{c.label}': f'"{c.reference}"' for c in channels}


def get_hw_ai_choices(workbench):
    plugin = workbench.get_plugin('psi.controller')
    channels = plugin.get_channels('analog', 'input', 'hardware', False)
    return {f'{c}': f'"{c.reference}"' for c in channels}


class ControllerManifestBase(ExperimentManifest):

    def get_hw_ao_choices(self):
        return get_hw_ao_choices(self.workbench)

    def get_hw_ai_choices(self):
        return get_hw_ai_choices(self.workbench)


PLUGIN_ID = 'psi.base_controller'


enamldef ControllerManifest(ControllerManifestBase): manifest:
    '''
    Defines the core functionality that most controller plugins will share
    (start, stop, pause, apply/revert settings).
    '''
    # Set attrs that guide experiment description
    name = 'controller'
    required = True

    id = 'psi.controller'
    factory = ControllerPlugin

    attr window_title = 'psiexperiment'

    ExtensionPoint:
        id = 'psi.controller.io'

    ExtensionPoint:
        id = 'psi.controller.actions'

    ExtensionPoint:
        id = 'psi.controller.wrapup'

    Extension:
        id = 'psi.controller.default_wrapup'
        point = 'psi.controller.wrapup'
        factory = lambda w: show_results
        rank = -1000

    Extension:
        id = PLUGIN_ID + '.branding'
        point = 'enaml.workbench.ui.branding'
        Branding:
            title << manifest.window_title

    Extension:
        id = PLUGIN_ID + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.start'
            handler = start_experiment
        Command:
            id = 'psi.controller.stop'
            handler = stop_experiment

        Command:
            id = 'psi.controller.next_trial'
            handler = rpc('psi.controller', 'end_trial')
        Command:
            id = 'psi.controller.request_apply'
            handler = rpc('psi.controller', 'request_apply')
        Command:
            id = 'psi.controller.request_pause'
            handler = rpc('psi.controller', 'request_pause')
        Command:
            id = 'psi.controller.request_resume'
            handler = rpc('psi.controller', 'request_resume')

        Command:
            id = 'psi.controller.configure_engines'
            handler = rpc('psi.controller', 'configure_engines')
        Command:
            id = 'psi.controller.finalize_io'
            handler = rpc('psi.controller', 'finalize_io')
        Command:
            id = 'psi.controller.start_engines'
            handler = rpc('psi.controller', 'start_engines')
        Command:
            id = 'psi.controller.stop_engines'
            handler = rpc('psi.controller', 'stop_engines')
        Command:
            id = 'psi.controller.reset_engines'
            handler = rpc('psi.controller', 'reset_engines')
        Command:
            id = 'psi.controller.log_io'
            handler = log_io
        Command:
            id = 'psi.controller.log_actions'
            handler = log_actions
        Command:
            id = 'psi.controller.log_events'
            handler = log_events
        Command:
            id = 'psi.controller.log_commands'
            handler = log_commands
        Command:
            id = 'psi.controller.invoke_actions'
            handler = invoke_actions

    # Uses unicode symbols as icons for sake of simplicity.
    Extension:
        id = PLUGIN_ID + '.toolbar'
        rank = 1
        point = 'psi.experiment.toolbar'

        ToolBar:
            Action:
                text = 'Start'
                tool_tip = 'Start experiment'
                triggered ::
                    plugin = workbench.get_plugin('enaml.workbench.core')
                    plugin.invoke_command('psi.controller.start')
                enabled << controller.experiment_state == 'initialized'
            Action:
                text = 'Stop'
                tool_tip = 'Stop experiment'
                triggered ::
                    parameters = {'stop_reason': 'user clicked stop button'}
                    plugin = workbench.get_plugin('enaml.workbench.core')
                    plugin.invoke_command('psi.controller.stop', parameters)
                enabled <<  controller.experiment_state not in ('initialized', 'stopped')
            Action:
                separator = True

            # Apply/Revert logic should pass through the controller so we can
            # ensure that the changes occur at the appropriate time in a trial
            # (i.e., in between trials). 
            Action:
                text = 'Apply'
                enabled << context.changes_pending \
                    and not controller._apply_requested \
                    and controller.experiment_state in ('running', 'paused')
                triggered ::
                    plugin = workbench.get_plugin('enaml.workbench.core')
                    plugin.invoke_command('psi.controller.request_apply')

    Extension:
        id = PLUGIN_ID + '.menu'
        point = 'enaml.workbench.ui.actions'
        MenuItem:
            path = '/equipment'
            label = 'Equipment'
            after = 'configuration'
        MenuItem:
            path = '/equipment/output'
            label = 'Outputs'

    Extension:
        id = PLUGIN_ID + '.actions'
        point = 'psi.controller.actions'
        rank = 10

        ExperimentEvent:
            name = 'experiment_initialize'
        ExperimentState:
            name = 'experiment'
        ExperimentEvent:
            name = 'experiment_paused'
        ExperimentEvent:
            name = 'experiment_resumed'
        ExperimentEvent:
            name = 'io_configured'
        ExperimentEvent:
            name = 'engines_configured'
        ExperimentEvent:
            name = 'engines_started'
        ExperimentEvent:
            name = 'engines_stopped'
        ExperimentEvent:
            name = 'experiment_event'

        ExperimentAction:
            event = 'context_initialized'
            command = 'psi.controller.finalize_io'
        ExperimentAction:
            event = 'engines_configured'
            command = 'psi.controller.log_io'
            weight = 0
        ExperimentAction:
            event = 'plugins_started'
            command = 'psi.controller.log_actions'
        ExperimentAction:
            event = 'plugins_started'
            command = 'psi.controller.log_events'
        ExperimentAction:
            event = 'plugins_started'
            command = 'psi.controller.log_commands'
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_engines'
            weight = 100
        ExperimentAction:
            event = 'experiment_start'
            command = 'psi.controller.start_engines'
        ExperimentAction:
            event = 'experiment_end'
            command = 'psi.controller.stop_engines'
