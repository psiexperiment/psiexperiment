import logging
log = logging.getLogger(__name__)

from functools import partial
import operator
from collections import defaultdict

from atom.api import Int, List, Str, Typed
from enaml.application import deferred_call
from enaml.core.api import d_
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
from enaml.widgets.api import ProgressBar

from ..sink import SinkWithSource, SinkWithSourceManifest

from psi.context.context_item import ContextMeta
from psi.controller.api import ExperimentAction
from psi.experiment.api import StatusItem


class EpochCounter(SinkWithSource):

    current_n = Int()
    requested_n = Int()
    output_name = d_(Str())

    def _update_data(self, epochs):
        n = epochs.shape[0]
        deferred_call(lambda: setattr(self, 'current_n', self.current_n + n))


class GroupedEpochCounter(EpochCounter):

    groups = d_(Typed(ContextMeta))
    extra_groups = d_(List())

    #: Number of epochs requested per group. Does not allow for per-group
    #: averages.
    requested_group_n = d_(Int(100))

    counts = Typed(defaultdict, (int,))
    get_key = Typed(object)

    def _default_get_key(self):
        groups = self.groups.values + self.extra_groups
        if len(groups):
            group_names = [v.name for v in groups]
            return operator.itemgetter(*group_names)

    def _update_data(self, epochs):
        for e in epochs:
            key = self.get_key(e.metadata)
            self.counts[key] += 1
        current_n = sum(min(c, self.requested_group_n) for c in self.counts.values())
        deferred_call(lambda: setattr(self, 'current_n', current_n))


def update_counter(contribution, event):
    if not contribution.output_name:
        raise ValueError(f'Must specify output name for epoch counter {contribution.label}')
    controller = event.workbench.get_plugin('psi.controller')
    output = controller.get_output(contribution.output_name)
    contribution.requested_n = output.queue.count_requested_trials()


enamldef EpochCounterManifest(SinkWithSourceManifest): manifest:

    Extension:
        id = manifest.id + '.counter_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = f'{manifest.contribution.name}.update_counter'
            handler = partial(update_counter, manifest.contribution)

    Extension:
        id = manifest.id + '.counter_actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_start'
            command = f'{manifest.contribution.name}.update_counter'

    Extension:
        id = manifest.id + '.counter_workspace'
        point = 'psi.experiment.status'
        rank = 10

        StatusItem:
            label = 'Percent done'
            ProgressBar:
                maximum << manifest.contribution.requested_n
                value << manifest.contribution.current_n
                text_visible = True
