import logging
log = logging.getLogger(__name__)

import atexit
from collections.abc import Mapping
from functools import partial

from atom.api import Bool, ContainerList, Value
from enaml.core.api import Conditional, d_
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
import pandas as pd

from psi.context.api import OrderedContextMeta
from psi.controller.api import ExperimentAction, ExperimentEvent
from psi.core.enaml.api import PSIManifest

from .base_store import BaseStore


class TableStore(BaseStore):

    # Show a widget in the GUI?
    show_widget = d_(Bool(False))

    # Save the data to a file?
    save_data = d_(Bool(True))

    # Allow user to specify columns?
    select_visible_columns = d_(Bool(True))

    _data = ContainerList()
    _store = Value()
    _columns = Value()

    def get_filename(self):
        return super().get_filename(self.name, '.csv')

    def prepare(self):
        if not self.save_data:
            return
        path = self.get_filename()
        self._store = path.open('w', newline='\n')
        atexit.register(self._store.close)

    def _save_data(self, data):
        if isinstance(data, Mapping):
            df = pd.DataFrame(pd.Series(data)).T
        else:
            df = pd.DataFrame(data)

        if self._columns is not None:
            # Ensure that ordering is preserved
            df = df[self._columns]
            header = False
        else:
            self._columns = list(df.columns)
            header = True

        csv_string = df.to_csv(index=False, header=header,
                               lineterminator='\n')
        self._store.write(csv_string)
        if flush:
            self.flush()

    def _update_widget(self, data):
        if isinstance(data, Mapping):
            self._data.append(data)
        else:
            self._data.extend(data)

    def process_table(self, data):
        if self.save_data:
            self._save_data(data)
        if self.show_widget:
            self._update_widget(data)
        if flush:
            self.flush()

    def flush(self):
        if self._store.closed:
            return
        self._store.flush()


def prepare(sink, event):
    sink.prepare()


def save(sink, event):
    sink.process_table(event.parameters['data'])


def flush(sink, event):
    sink.flush()
    controller = event.workbench.get_plugin('psi.controller')
    controller.invoke_actions(f'{sink.name}_flushed')


enamldef TableStoreManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = contribution.name + '.prepare'
            handler = partial(prepare, contribution)

        Command:
            id = contribution.name + '.save'
            handler = partial(save, contribution)

        Command:
            id = manifest.id + '.flush'
            handler = partial(flush, contribution)

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_prepare'
            command = contribution.name + '.prepare'

        ExperimentAction:
            weight = 1000
            event = 'experiment_end'
            command = manifest.id + '.flush'

        ExperimentEvent:
            name = f'{manifest.contribution.name}_flushed'
