import logging
log = logging.getLogger(__name__)

import atexit
from functools import partial
import json
from pathlib import Path

from atom.api import Bool, Dict, List, set_default, Typed
from enaml.core.api import d_
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command
import pandas as pd

from psi.controller.api import ExperimentAction
from psi.core.enaml.api import PSIManifest
from psi.util import declarative_to_dict

from .base_store import BaseEpochData, BaseStore, BaseStoreManifest


class TextEpochData(BaseEpochData):

    metadata_filename = Typed(Path)
    dirty = Bool(False)

    def append(self, data):
        _, metadata = self._split_epochs_metadata(data)
        self.metadata.extend(metadata)
        self.dirty = True

    def flush(self):
        if self.dirty:
            pd.DataFrame(self.metadata).to_csv(self.metadata_filename)
            self.dirty = False

    def get_epoch_groups(self, grouping):
        raise TypeError('TextStore does not support loading epoch signal')


class TextStore(BaseStore):
    '''
    Simple class for storing data in human-readable formats (CSV and text)
    '''
    name = set_default('text_store')

    def get_source(self, name):
        try:
            store = self._stores[name]
            if isinstance(store, TextEpochData):
                return pd.DataFrame(store.metadata)
            else:
                return store
        except KeyError as e:
            raise AttributeError(name)

    def save_dataframe(self, name, dataframe, overwrite=False):
        path = self.get_filename(name, '.csv')
        log.info(f'Saving {name} to {path}')
        if not overwrite and path.exists():
            raise IOError('{} already exists'.format(path))
        dataframe.to_csv(path)
        return path

    def save_mapping(self, name, mapping, overwrite=False):
        path = self.get_filename(name, '.json')
        if not overwrite and path.exists():
            raise IOError('{} already exists'.format(path))
        with open(path, 'w') as fh:
            json.dump(mapping, fh, sort_keys=True, indent=4)
        return path

    def create_ai_epochs(self, name, fs, dtype, metadata):
        # Write the metadata to a file
        filename = Path(self.get_filename(f'{name}_metadata', '.json'))
        filename.write_text(json.dumps(metadata))
        log.info('Saved epoch metadata %s attrs to %s', name, filename)

        # Set up the output file for the epoch info
        md_filename = self.get_filename(f'{name}_metadata', '.csv')
        self._stores[name] = TextEpochData(metadata=[],
                                           metadata_filename=md_filename)

    def process_ai_epochs(self, name, data):
        self._stores[name].append(data)


def save_mapping(sink, event):
    return sink.save_mapping(event.parameters['name'],
                             event.parameters['mapping'],
                             event.parameters.get('overwrite', False))


def save_dataframe(sink, event):
    return sink.save_dataframe(event.parameters['name'],
                               event.parameters['dataframe'],
                               event.parameters.get('overwrite', False))


enamldef TextStoreManifest(BaseStoreManifest): manifest:

    Extension:
        id = manifest.id + '.text_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = contribution.name + '.save_dataframe'
            handler = partial(save_dataframe, manifest.contribution)
        Command:
            id = contribution.name + '.save_mapping'
            handler = partial(save_mapping, manifest.contribution)
