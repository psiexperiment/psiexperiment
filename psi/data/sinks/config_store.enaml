import logging
log = logging.getLogger(__name__)

from functools import partial
import json

from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.controller.api import ExperimentAction
from psi.core.enaml.api import PSIManifest
from psi.experiment.manifest import _save_preferences
from psi.util import declarative_to_dict
from .base_store import BaseStore


def _save_io(controller, filename):
    result = {
        'output': {},
        'input': {},
    }
    for c in controller.get_channels(direction='output', active=False):
        result['output'][c.name] = declarative_to_dict(c, 'metadata', True)
    for c in controller.get_channels(direction='input', active=False):
        result['input'][c.name] = declarative_to_dict(c, 'metadata', True)
    filename.write_text(json.dumps(result, indent=2, allow_nan=True))


class ConfigStore(BaseStore):
    pass


def save_config(store, event):
    io_filename = event.parameters.get('io_filename', None)
    preferences_filename = event.parameters.get('preferences_filename', None)

    if io_filename is not None:
        io_filename = store.base_path / io_filename
        log.debug('Saving IO to %s', str(io_filename))
        controller = event.workbench.get_plugin('psi.controller')
        _save_io(controller, io_filename)

    if preferences_filename is not None:
        preferences_filename = store.base_path / preferences_filename
        log.debug('Saving preferences to %s', str(preferences_filename))
        _save_preferences(event, preferences_filename)


enamldef ConfigStoreManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = contribution.name + '.save_config'
            handler = partial(save_config, manifest.contribution)

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_start'
            command = contribution.name + '.save_config'
            kwargs = {
                'preferences_filename': 'initial.json',
                'io_filename': 'io.json',
            }

        ExperimentAction:
            event = 'experiment_end'
            command = contribution.name + '.save_config'
            kwargs = {
                'preferences_filename': 'final.json',
            }
