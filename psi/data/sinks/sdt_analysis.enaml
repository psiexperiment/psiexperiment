import logging
log = logging.getLogger(__name__)

from functools import partial

import numpy as np
import pandas as pd
from scipy.stats import norm

from atom.api import ContainerList, Typed, Str, Int, observe, Bool
from enaml.application import deferred_call
from enaml.core.api import d_
from enaml.layout.api import InsertItem, hbox, vbox, spacer
from enaml.widgets.api import (Container, DockItem, CheckBox, Label, HGroup)
from enaml.stdlib.fields import FloatField
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.controller.api import ExperimentAction
from psi.context.context_item import OrderedContextMeta
from psi.core.utils import find_extension
from psi.core.enaml.api import PSIManifest
from psi.core.enaml.editable_table_widget import DataFrameTable
from psi.experiment.api import ItemPreferences
from ..plugin import Sink
from .text_store import TextStore


class SDTAnalysis(Sink):

    name = 'sdt_analysis'
    label = 'SDT Analysis'

    trial_log = Typed(pd.DataFrame)
    results = Typed(pd.DataFrame)
    grouping = d_(Typed(list))

    limit = Int()
    include_repeat_nogo = Bool()
    include_go_remind = Bool()

    def trial_log_updated(self, trial_log):
        self.trial_log = trial_log
        self.update_results()

    def _observe_limit(self, event):
        self.update_results()

    def _observe_include_repeat_nogo(self, event):
        self.update_results()

    def _observe_include_go_remind(self, event):
        self.update_results()

    def update_results(self):
        if self.trial_log is None:
            return
        if not self.grouping:
            return

        trial_log = self.trial_log.iloc[-self.limit:].copy()
        if self.include_repeat_nogo:
            m = trial_log.trial_type == 'nogo_repeat'
            trial_log.loc[m, 'trial_type'] = 'nogo'
        if self.include_go_remind:
            m = trial_log.trial_type == 'go_remind'
            trial_log.loc[m, 'trial_type'] = 'go'

        m = trial_log.trial_type.apply(lambda x: x in ('nogo', 'go'))
        if not np.any(m):
            return

        agg = ['sum', 'size', 'mean']
        rename = {'sum': 'n_correct', 
                  'size': 'n_trials', 
                  'mean': 'fraction_correct'}

        r = trial_log[m] \
            .groupby(self.grouping)['correct'] \
            .agg(agg) \
            .rename(columns=rename)

        r['z_score'] = r['fraction_correct'] \
            .clip(lower=0.05, upper=0.95) \
            .apply(norm.ppf)

        # Attempt to correct for the FA rate. If there is no NOGO, then assume
        # the FA rate is 0.05 (which corresponds to a "correct" rate of 0.95.
        try:
            r['z_score'] += r.loc['nogo', 'z_score'].iloc[0]
        except:
            r['z_score'] += norm.ppf(0.95)
        self.results = r.astype(np.float32).reset_index()


enamldef SDTAnalysisDockItem(DockItem):

    attr analysis
    attr meta
    closable = False

    Container: sdt_container:
        constraints = [
            vbox(
                hbox(
                    limit_label,
                    limit_field,
                    spacer,
                    repeat_nogo_field,
                    go_remind_field,
                ),
                sdt_table,
            )
        ]

        Label: limit_label:
            text = 'Trial limit'
            hug_width = 'strong'
        FloatField: limit_field:
            text << str(analysis.limit)
            text ::
                analysis.limit = int(text)
        CheckBox: repeat_nogo_field:
            checked := analysis.include_repeat_nogo
            text = 'Include repeat NOGO?'
        CheckBox: go_remind_field:
            checked := analysis.include_go_remind
            text = 'Include reminders?'

        DataFrameTable: sdt_table:
            name = 'sdt_table'
            data << analysis.results
            columns << [v.name for v in meta.values] + extra_columns
            column_info << {**{v.name: v for v in meta.values}, **extra_column_info}


extra_columns = ['n_trials', 'n_correct', 'fraction_correct', 'z_score']
extra_column_info = {
    'n_trials': {'compact_label': '# trials'},
    'n_correct': {'compact_label': '# correct'},
    'fraction_correct': {'compact_label': 'Frac.'},
    'z_score': {'compact_label': 'd\''},
}

def save(sdt, event):
    core = event.workbench.get_plugin('enaml.workbench.core')

    sdt.limit = 0
    sdt.include_repeat_nogo = False
    sdt.include_go_remind = False

    if sdt.results is not None:
        cmd = '{}_store.update_mapping'.format(sdt.name)
        parameters = {'name': sdt.name, 'dataframe': sdt.results}
        core.invoke_command('text_store.create_table', parameters)


enamldef SDTAnalysisManifest(PSIManifest): manifest:

    Extension:
        id = 'items'
        point = 'psi.context.items'
        OrderedContextMeta: meta:
            name << manifest.contribution.name
            label << '{} grouping'.format(manifest.contribution.label)
            values::
                manifest.contribution.grouping = [v.name for v in values]

    Extension:
        id = 'commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.id + '.save'
            handler = partial(save, manifest.contribution)

    Extension:
        id = manifest.contribution.name + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_end'
            command = manifest.contribution.name + '.save'

    Extension:
        id = 'workspace'
        point = 'psi.experiment.workspace'

        SDTAnalysisDockItem: di:
            analysis << manifest.contribution
            name << manifest.contribution.name
            title << manifest.contribution.label
            meta << meta

    Extension:
        id = 'preferences'
        point = 'psi.experiment.preferences'
        rank = 200
        ItemPreferences:
            item << di.find('sdt_table')
            name << manifest.contribution.name
            auto_save = ['column_widths']

    Extension:
        id = manifest.contribution.name + '.data'
        point = 'psi.data.sinks'

        TextStore:
            name = manifest.contribution.name + '_store'
