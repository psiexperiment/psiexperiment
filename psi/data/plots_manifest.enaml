import logging
log = logging.getLogger(__name__)

from functools import partial

from atom.api import Typed, set_default
from enaml.application import deferred_call
from enaml.core.api import Conditional, Include, d_, Looper
from enaml.layout.api import spacer
from enaml.widgets.api import (ButtonGroup, CheckBox, Container, DockItem, Field, Form,
                               HGroup, Label, ObjectCombo, PushButton,
                               RawWidget)
from enaml.workbench.api import Extension, Workbench
from enaml.workbench.core.api import Command

import pyqtgraph as pg
pg.setConfigOption('foreground', 'k')

from psi.core.enaml.api import PSIManifest
from psi.controller.api import ExperimentAction
from psi.context.context_item import OrderedContextMeta
from psi.experiment.api import ItemPreferences


class PGCanvas(RawWidget):

    hug_width = set_default('ignore')
    hug_height = set_default('ignore')

    view = Typed(pg.GraphicsView)
    component = d_(Typed(pg.GraphicsWidget))

    def create_widget(self, parent):
        self.view = pg.GraphicsView(parent, background=(240, 240, 240))
        self.view.setCentralItem(self.component)
        return self.view

    def observe_component(self, event):
        self.view.setCentralItem(event['value'])


enamldef PlotGroupSelectButtons(Container):

    attr contribution

    HGroup:
        spacing = 0
        padding = 0
        align_widths = False
        trailing_spacer = spacer(0)

        Conditional:
            condition << contribution.allow_auto_select
            PushButton:
                text = 'Auto select'
                checkable = True
                checked := contribution.auto_select

        Conditional:
            condition << len(contribution.buttons) <= contribution.max_buttons
            Looper:
                iterable << contribution.buttons[:]
                PushButton: pb:
                    checkable = True
                    checked << contribution.current_button == loop_item
                    text = contribution.fmt_button(loop_item)
                    clicked ::
                        contribution.auto_select = False
                        contribution.current_button = loop_item

        Conditional:
            condition << len(contribution.buttons) > contribution.max_buttons
            ObjectCombo: oc:
                selected := contribution.current_button
                to_string = contribution.fmt_button
                items << contribution.buttons[:]


enamldef BasePlotContainerManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.workspace'
        point = 'psi.experiment.workspace'

        DockItem:
            name << manifest.contribution.name
            title << manifest.contribution.label
            closable = False

            Container:
                Conditional:
                    condition << bool(manifest.contribution.buttons)
                    PlotGroupSelectButtons:
                        contribution << manifest.contribution
                PGCanvas: canvas:
                    name << manifest.contribution.name + '_canvas'
                    component << manifest.contribution.container


enamldef TimeseriesPlotManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'io_configured'
            command = 'psi.data.attach_source'
            kwargs = {'obj': manifest.contribution}


def process_event(plot, event):
    p = event.parameters
    plot._append_data(p['type'], p['timestamp'])


enamldef EventPlotManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.contribution.name + '.process'
            handler = partial(process_event, manifest.contribution)

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event << manifest.contribution.event + '_start'
            command = manifest.contribution.name + '.process'
            kwargs = {'type': 'start'}

        ExperimentAction:
            event << manifest.contribution.event + '_end'
            command = manifest.contribution.name + '.process'
            kwargs = {'type': 'end'}


enamldef BasePlotManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.contribution.name + '_update'
            handler = partial(update_plot, manifest.contribution)

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'io_configured'
            command = 'psi.data.attach_source'
            kwargs = {'obj': manifest.contribution}
            weight = 15

        ExperimentAction:
            # This final update ensures that we always plot new data (otherwise
            # sometimes the final segment doesn't get plotted due to thread
            # race conditions).
            event = 'experiment_end'
            command = manifest.contribution.name + '_update'


enamldef DataFramePlotManifest(PSIManifest): manifest:
    # This overrides attempts to load the BasePlotManifest
    pass


def set_group_keys(container, event):
    context = event.workbench.get_plugin('psi.context')
    if container.autogenerate_keys in ('both', 'tab'):
        container.tab_keys = []
        if container.tab_grouping:
            container.tab_keys = sorted(context.unique_values(container.tab_grouping))
            log.debug('Found tab keys %r', container.tab_keys)

    if container.autogenerate_keys in ('both', 'plot'):
        container.plot_keys = [()]
        if container.plot_grouping:
            container.plot_keys = sorted(context.unique_values(list(container.plot_grouping)))
            log.debug('Found plot keys %r', container.plot_keys)


enamldef ViewBoxManifest(PSIManifest): manifest:

    Conditional:
        condition << manifest.contribution.save_limits

        Extension:
            id = manifest.id + '.preferences'
            point = 'psi.experiment.preferences'
            ItemPreferences:
                name << manifest.contribution.name
                item << manifest.contribution
                auto_save = ['y_min', 'y_max']


enamldef GroupMixinManifest(BasePlotManifest): manifest:

    Extension:
        id = manifest.id + '.stacked_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = manifest.contribution.name + '.set_groups'
            handler = partial(set_group_keys, manifest.contribution)

    Conditional:
        condition = manifest.contribution.autogenerate_keys != 'none'

        Extension:
            id = manifest.id + '.stacked_actions'
            point = 'psi.controller.actions'

            ExperimentAction:
                event = 'context_initialized'
                command = manifest.contribution.name + '.set_groups'
