import logging
log = logging.getLogger(__name__)

import atexit
import datetime as dt
from pathlib import Path
import shutil

import enaml
from enaml.workbench.api import Extension, PluginManifest, ExtensionPoint
from enaml.workbench.core.api import Command

from psi import get_config
from psi.controller.api import ExperimentAction

from .plugin import DataPlugin
from .sinks.api import ConfigStore


def set_base_path(event):
    base_path = event.parameters['base_path']
    is_temp = event.parameters['is_temp']

    dt_string = dt.datetime.now().strftime('%Y%m%d-%H%M%S')
    base_path = base_path.format(date_time=dt_string)
    data = event.workbench.get_plugin('psi.data')

    base_path = Path(base_path)

    # Be sure path exists and is empty.
    if not base_path.exists():
        base_path.mkdir(parents=True)
    elif len(list(base_path.iterdir())) != 0:
        raise IOError('Base path exists and it is not empty')

    if is_temp:
        atexit.register(shutil.rmtree, base_path)

    data.set_base_path(base_path, is_temp)


def attach_source(event):
    controller = event.workbench.get_plugin('psi.controller')
    obj = event.parameters['obj']
    source_name_attr = event.parameters.get('source_name_attr', 'source_name')
    source_name = getattr(obj, source_name_attr)
    obj.source = controller.get_input(source_name)


def log_sinks(event):
    plugin = event.workbench.get_plugin('psi.data')
    sink_names = ', '.join(plugin._sinks.keys())
    log.info('Available sinks: %s', sink_names)


enamldef DataManifest(PluginManifest): manifest:

    id = 'psi.data'
    factory = DataPlugin

    ExtensionPoint:
        id = 'sinks'

    ExtensionPoint:
        id = 'plots'

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = manifest.id + '.set_base_path'
            handler = set_base_path
        Command:
            id = manifest.id + '.attach_source'
            handler = attach_source
        Command:
            id = manifest.id + '.log_sinks'
            handler = log_sinks

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'context_initialized'
            command = 'psi.data.log_sinks'

    Extension:
        id = manifest.id + '.sinks'
        point = 'psi.data.sinks'

        ConfigStore:
            pass
