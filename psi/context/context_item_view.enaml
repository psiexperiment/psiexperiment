import logging
log = logging.getLogger(__name__)

from atom.api import Typed
from enaml.core.api import Conditional, DynamicTemplate, Looper
from enaml.layout.api import align, hbox, spacer
from enaml.widgets.api import (Container, Field, CheckBox, Label, HGroup,
                               PushButton, PopupView, Form, ObjectCombo, VGroup)
from enaml.validator import Validator

from .context_item import (Result, Parameter, EnumParameter, FileParameter,
                           BoolParameter, OrderedContextMeta,
                           UnorderedContextMeta, ContextRow)

from .expression import ExpressionNamespace


class ContextItemValidator(Validator):

    plugin = Typed(object)
    item = Typed(object)

    def validate(self, text):
        try:
            namespace = ExpressionNamespace()
            expressions = self.plugin.all_expressions
            expressions[self.item.name] = text
            namespace.update_expressions(expressions)
            namespace.update_symbols(self.plugin.symbols)
            namespace.get_value(self.item.name)
            return True
        except:
            return False


################################################################################
# ContextMetaPopup
# 
# Defines the view that appears when configuring details regarding the
# parameter.
################################################################################
template ContextMetaTemplate(context_meta, context_item,
                             MemberType: OrderedContextMeta):
    ObjectCombo:
        items = [None] + context_meta.get_choices(context_item)
        to_string = lambda i: '' if i is None else str(i)
        selected << context_meta.get_choice(context_item)
        selected::
            context_meta.set_choice(selected, context_item)


template ContextMetaTemplate(context_meta, context_item,
                             MemberType: UnorderedContextMeta):

    CheckBox:
        checked << context_item in context_meta.values
        checked ::
            if checked:
                values = context_meta.values.copy()
                values.add(context_item)
            else:
                values = context_meta.values.copy()
                values.remove(context_item)
            context_meta.values = values


enamldef ContextMetaPopup(PopupView): cm_popup:

    attr context_item
    attr context_meta

    VGroup:
        Looper:
            iterable << context_meta
            HGroup:
                padding = 0
                Label:
                    text = loop_item.label
                DynamicTemplate:
                    base = ContextMetaTemplate
                    args = (loop_item, context_item, type(loop_item))


################################################################################
# ContextItemTemplate
################################################################################
template ContextItemTemplate(row, MemberType: ContextRow):
    Container:
        padding = 0
        share_layout = True
        layout_constraints => ():
            widgets = [c for c in children[:-1] if not isinstance(c, WidgetDynamicTemplate)]
            widgets.append(spacer(0))
            constraints = [hbox(*widgets, spacing=5)]
            for item, widget in zip(row.fmt, widgets):
                if isinstance(widget, Field):
                    constraints.append(widget.width == 45)
            constraints.append(align('v_center', *widgets[:-1]))
            return constraints
        Looper:
            iterable << row.fmt[:]
            WidgetDynamicTemplate:
                args = (loop_item, type(loop_item))


template ContextItemTemplate(context_item, MemberType: str):
    Label:
        text << context_item


template ContextItemTemplate(context_item, MemberType: Result):
    Label:
        text << context_item.label


def get_scope(default_scope, workbench):
    for selector in workbench.get_plugin('psi.context').selectors.values():
        if selector.user_managed:
            return default_scope
    return 'experiment'


template ContextItemTemplate(context_item, MemberType: Parameter):
    DynamicTemplate:
        base = ParameterTemplate
        args << (context_item,
                 type(context_item),
                 get_scope(context_item.scope, workbench))


template ParameterTemplate(context_item, MemberType, scope):
    HGroup: group:
        spacing = 5
        padding = 0
        share_layout = True
        align_widths = False
        enabled << context_item.editable
        Label: label:
            text << context_item.label
        WidgetDynamicTemplate:
            pass


template ParameterTemplate(context_item, MemberType, scope: 'experiment'):
    HGroup: group:
        spacing = 5
        padding = 0
        share_layout = True
        align_widths = False
        enabled << workbench.get_plugin('psi.controller') \
            .experiment_state not in ('running', 'paused') and \
            context_item.editable
        Label: label:
            tool_tip << context_item.name
            text << context_item.label
        WidgetDynamicTemplate:
            pass


template ParameterTemplate(context_item, MemberType, scope: 'trial'):
    HGroup: group:
        spacing = 5
        padding = 0
        enabled << context_item.editable
        share_layout = True
        align_widths = False
        CheckBox: label:
            tool_tip << context_item.name
            status_tip << context_item.name
            text << context_item.label
            checked := context_item.rove
            checked ::
                pass
        WidgetDynamicTemplate:
            pass


################################################################################
# WidgetTemplate
################################################################################
enamldef WidgetDynamicTemplate(DynamicTemplate):
    base = WidgetTemplate
    args = (context_item, type(context_item))


template WidgetTemplate(context_item, MemberType):
    Field:
        text := context_item.expression
        validator << ContextItemValidator(plugin=workbench.get_plugin('psi.context'), item=context_item)
        submit_triggers = ['lost_focus', 'return_pressed', 'auto_sync']


template WidgetTemplate(context_item, MemberType: str):
    Label:
        text << context_item


template WidgetTemplate(context_item, MemberType: EnumParameter):
    ObjectCombo:
        items << sorted(context_item.choices.keys())
        selected := context_item.selected


template WidgetTemplate(context_item, MemberType: BoolParameter):
    CheckBox:
        text = ''
        checked << eval(context_item.expression)
        toggled ::
            if checked:
                context_item.expression = 'True'
            else:
                context_item.expression = 'False'


################################################################################
# The container to tie it all together
################################################################################
enamldef ContextItemView(HGroup): container:
    attr context_item
    padding = 0
    spacing = 0
    align_widths = False
    share_layout = True

    DynamicTemplate:
        base = ContextItemTemplate
        args = (context_item, type(context_item))

    Conditional:
        condition << workbench.get_plugin('psi.context').context_meta_editable
        PushButton: pb:
            constraints = [pb.width == 20]
            text << 'C'
            clicked::
                context_meta = workbench.get_plugin('psi.context').get_metas(editable=True)
                cm_popup = ContextMetaPopup(parent=self,
                                            context_meta=context_meta,
                                            context_item=context_item)
                cm_popup.show()
