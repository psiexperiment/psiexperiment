import logging
log = logging.getLogger(__name__)

import atexit
from functools import partial
from pathlib import Path
import shutil
import tempfile

from atom.api import Typed
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import Result
from psi.controller.api import ExperimentAction
from psi.core.enaml.api import ExperimentManifest, PSIManifest
from psi.data.api import Sink

from psivideo.client import SyncVideoClient


class VideoSink(Sink):

    client = Typed(SyncVideoClient, {})
    base_path = Typed(Path)

    def _default_base_path(self):
        # Create a temporary folder. Be sure to delete when the program exits.
        base_path = tempfile.mkdtemp()
        atexit.register(shutil.rmtree, base_path)
        return Path(base_path)

    def set_base_path(self, base_path):
        self.base_path = base_path

    def start_client(self):
        self.client.connect()

    def start_recording(self):
        self.client.start(self.base_path / 'recording.avi')

    def stop_recording(self):
        try:
            self.client.stop()
        except Exception as e:
            log.exception(e)

    def get_timing(self):
        return self.client.get_timing()


def get_timing(client, event):
    info = client.get_timing()
    context = event.workbench.get_plugin('psi.context')
    context.set_value('psivideo_frames_written', info['frame_number'])
    context.set_value('psivideo_frame_ts', info['timestamp'])


enamldef VideoSinkManifest(PSIManifest): manifest:

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psivideo.start_client'
            handler = lambda e: manifest.contribution.start_client()
        Command:
            id = 'psivideo.start_recording'
            handler = lambda e: manifest.contribution.start_recording()
        Command:
            id = 'psivideo.stop_recording'
            handler = lambda e: manifest.contribution.stop_recording()
        Command:
            id = 'psivideo.get_timing'
            handler = partial(get_timing, manifest.contribution)


enamldef PSIVideo(ExperimentManifest): manifest:

    id = 'psivideo'
    name = 'psivideo'
    title = 'PSIVideo'

    Extension:
        id = manifest.id + '.sinks'
        point = 'psi.data.sinks'

        VideoSink:
            name = 'psivideo'

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = 'plugins_started'
            command = 'psivideo.start_client'
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psivideo.start_recording'
        ExperimentAction:
            event = 'experiment_end'
            command = 'psivideo.stop_recording'
        ExperimentAction:
            event = 'trial_start'
            command = 'psivideo.get_timing'

    Extension:
        id = manifest.id + '.parameters'
        point = 'psi.context.items'

        Result:
            name = 'psivideo_frames_written'
            label = 'Video frames written'
            compact_label = 'Frames'
            group_name = 'results'

        Result:
            name = 'psivideo_frame_ts'
            label = 'Video frame timestamp'
            compact_label = 'Video TS'
            group_name = 'results'
