import logging
log = logging.getLogger(__name__)

import asyncio
from functools import partial
import json
from threading import Thread
from urllib.parse import urlparse

from atom.api import set_default, Str, Typed, Value
from enaml.workbench.api import Extension, Plugin
from enaml.workbench.core.api import Command
import websockets

from psi.controller.api import ExperimentAction
from psi.core.enaml.api import ExperimentManifest


async def send_handler(send_queue, websocket):
    while True:
        mesg = await send_queue.get()
        log.info('Sending mesg via websocket: %r', mesg)
        await websocket.send(mesg)


async def recv_handler(websocket, core):
    while True:
        mesg = json.loads(await websocket.recv())
        log.info('Recieved mesg from websocket: %r', mesg)
        core.invoke_command(mesg['command'],
                            parameters=mesg.get('parameters', {}))


async def handler(send_queue, core, websocket):
    log.info(f'Connection from {websocket}')
    send_task = asyncio.create_task(send_handler(send_queue, websocket))
    recv_task = asyncio.create_task(recv_handler(websocket, core))
    await asyncio.gather(send_task, recv_task)


def start_websocket_server(host, port, loop, send_queue, core):
    cb = partial(handler, send_queue, core)
    server = websockets.serve(cb, host, port, loop=loop)
    loop.run_until_complete(server)
    log.info(f'Websocket server listening on ws://{host}:{port}')
    loop.run_forever()


class WebsocketPlugin(Plugin):

    websocket_uri = Str('ws://localhost:8765')

    loop = Value()
    send_queue = Typed(asyncio.Queue, args=())
    thread = Typed(Thread)

    def _default_loop(self):
        return asyncio.new_event_loop()

    def start_server(self, event):
        core = event.workbench.get_plugin('enaml.workbench.core')
        host, port = urlparse(self.websocket_uri).netloc.split(':')
        args = (host, port, self.loop, self.send_queue, core)
        self.thread = Thread(target=start_websocket_server, args=args,
                             daemon=True)
        self.thread.start()

    def send_experiment_event(self, event):
        self._send_message(json.dumps(event.parameters['data']))

    def send_message(self, message):
        self._send_message(json.dumps(message))

    def _send_message(self, message):
        self.loop.call_soon_threadsafe(self.send_queue.put_nowait, message)


enamldef WebsocketManifest(ExperimentManifest): manifest:

    id = 'psi.websocket'
    factory = WebsocketPlugin

    Extension:
        id = 'websocket_commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'websocket.start_server'
            handler = lambda e: workbench.get_plugin('psi.websocket').start_server(e)

        Command:
            id = 'websocket.send_message'
            handler = lambda e: workbench.get_plugin('psi.websocket').send_message(e.parameters['message'])

        Command:
            id = 'websocket.send_experiment_event'
            handler = lambda e: workbench.get_plugin('psi.websocket').send_experiment_event(e)

    Extension:
        id = 'websocket_actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'plugins_started'
            command = 'websocket.start_server'

        ExperimentAction:
            event = 'experiment_event'
            command = 'websocket.send_experiment_event'
