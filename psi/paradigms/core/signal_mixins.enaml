from enaml.core.api import Looper
from enaml.workbench.api import Extension

from psi.core.enaml.api import ExperimentManifest
from psi.data.plots import (ChannelPlot, FFTChannelPlot, FFTContainer,
                            TimeContainer, ViewBox)

################################################################################
# Microphone mixins
################################################################################
enamldef MultiSignalViewManifest(ExperimentManifest): manifest:

    id = 'signal_view'
    name = 'signal_view'
    title = 'Signal view (time)'

    alias time_span: time_container.span
    alias time_delay: time_container.delay
    alias y_label: vb.y_label

    attr sources

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        TimeContainer: time_container:
            name << manifest.name + '_container'
            label << manifest.title
            span = 4
            delay = 0.125

            ViewBox: vb:
                name << manifest.name + '_vb'
                y_min = -0.2
                y_max = 0.2
                y_mode = 'mouse'
                save_limits = True

                Looper:
                    iterable << sources.items() if sources is not None else []

                    ChannelPlot: time_plot:
                        name << manifest.name + f'{loop_item[0]}_plot'
                        source_name = loop_item[0]
                        pen_color = loop_item[1].get('color', 'k')


enamldef SignalViewManifest(MultiSignalViewManifest): manifest:

    attr source_name

    initialized ::
        manifest.sources = {manifest.source_name: {'color': 'k'}}


enamldef MultiSignalFFTViewManifest(ExperimentManifest): manifest:

    id = 'signal_fft_view'
    name = 'signal_fft_view'
    title = 'Signal view (PSD)'

    alias fft_freq_lb: fft_container.freq_lb
    alias fft_freq_ub: fft_container.freq_ub
    alias y_label: fft_vb.y_label

    #: Must be a dictionary mapping source_name to a dictionary of
    #: FFTChannelPlot properties (currently supported properties include color,
    #: apply_calibration, fft_time_span, and waveform_averages). For example:
    #: sources = {'probe_mic': {'color': 'k'}, 'elicitor_mic': {'color': 'r'}}
    attr sources

    Extension:
        id = manifest.id  + '.plots'
        point = 'psi.data.plots'

        FFTContainer: fft_container:
            name << manifest.name + '_container'
            label << manifest.title
            freq_lb = 5
            freq_ub = 50000

            ViewBox: fft_vb:
                name << manifest.name + '_vb'
                y_min = -10
                y_max = 100
                y_mode = 'mouse'
                save_limits = True

                Looper:
                    iterable << sources.items() if sources is not None else []

                    FFTChannelPlot:
                        name << manifest.name + f'{loop_item[0]}_plot'
                        source_name = loop_item[0]
                        pen_color = loop_item[1].get('color', 'k')
                        apply_calibration = loop_item[1].get('apply_calibration', False)
                        waveform_averages = loop_item[1].get('waveform_averages', 1)
                        time_span = loop_item[1].get('fft_time_span', 1)


enamldef SignalFFTViewManifest(MultiSignalFFTViewManifest): manifest:

    attr source_name
    attr apply_calibration = False
    attr waveform_averages = 1
    attr fft_time_span = 1

    initialized ::
        manifest.sources = {
            manifest.source_name: {
                'color': 'k',
                'apply_calibration': manifest.apply_calibration,
                'waveform_averages': manifest.waveform_averages,
                'fft_time_span': manifest.fft_time_span,
            }
        }
