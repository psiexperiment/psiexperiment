import logging
log = logging.getLogger(__name__)

from enaml.stdlib.message_box import warning
from enaml.widgets.api import ProgressBar
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import Expression, SequenceSelector
from psi.controller.api import ExperimentAction
from psi.data.plots import ResultPlot, PlotContainer, ViewBox
from psi.experiment.api import StatusItem

from .cfts_mixins import CFTSSelector, check_range
from .dpoae_base import DPOAEManifest
from .dpoae_mixins import DPOAEThreshold

EXPERIMENT = __name__.rsplit('.', 1)[-1]
EXPERIMENT_SIMPLE = __name__.rsplit('.', 1)[-1] + '_simple'


enamldef DPOAEIOBaseManifest(DPOAEManifest): manifest:

    Extension:
        id = EXPERIMENT + '.sinks'
        point = 'psi.data.sinks'

        DPOAEThreshold:
            name = 'dpoae_threshold'

    Extension:
        id = EXPERIMENT + '.commands'
        point = 'enaml.workbench.core.commands'

    Extension:
        id = EXPERIMENT + '.context'
        point = 'psi.context.items'

        Expression:
            # Set tone duration to one hour. If you need more than one hour,
            # you need to check your settings! TODO: We should be able to set
            # this to np.inf to indicate open-ended duration, but this is
            # causing the program to hang. Need to track down the bug.
            parameter = 'secondary_tone_duration'
            expression = '3600'

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'dpoae_acquired'
            command = 'psi.context.next_setting'
            kwargs = {'selector': 'actual', 'save_prior': True}

        ExperimentAction:
            event = 'context_next_setting'
            command = 'dpoae.start'
            kwargs = {'delay': 1.0}

        ExperimentAction:
            event = 'context_complete'
            command = 'psi.controller.stop'

    Extension:
        id = EXPERIMENT + '.plots'
        point = 'psi.data.plots'

        PlotContainer: pc:
            name = 'dpoae_io_container'
            label = 'DPOAE input-output functions'
            fmt_button => (key):
                return '{} Hz'.format(key[0])

            ViewBox: vb:
                name = 'dpoae_io_viewbox'
                y_mode = 'mouse'
                save_limits = True

                ResultPlot: grp:
                    source_name = 'analyze_dpoae'
                    x_column = 'secondary_tone_level'
                    pen_width = 2
                    tab_grouping = ['secondary_tone_frequency']
                    tab_keys >> pc.buttons
                    selected_tab := pc.current_button
                    auto_select := pc.auto_select
                    label = 'F2'
                    y_column = 'f2_level'
                    pen_color = 'indianred'

                ResultPlot:
                    source_name << grp.source_name
                    x_column << grp.x_column
                    pen_width << grp.pen_width
                    tab_grouping << grp.tab_grouping
                    selected_tab << grp.selected_tab
                    auto_select << grp.auto_select
                    label = 'F1'
                    y_column = 'f1_level'
                    pen_color = 'lightsalmon'

                ResultPlot:
                    source_name << grp.source_name
                    x_column << grp.x_column
                    pen_width << grp.pen_width
                    tab_grouping << grp.tab_grouping
                    selected_tab << grp.selected_tab
                    auto_select << grp.auto_select
                    label = 'Noise Floor'
                    y_column = 'dpoae_noise_floor'
                    pen_color = 'lightsteelblue'

                ResultPlot:
                    source_name << grp.source_name
                    x_column << grp.x_column
                    pen_width << grp.pen_width
                    tab_grouping << grp.tab_grouping
                    selected_tab << grp.selected_tab
                    auto_select << grp.auto_select
                    label = 'DPOAE'
                    y_column = 'dpoae_level'
                    pen_color = 'darkred'

    Extension:
        id = EXPERIMENT + '.workspace'
        point = 'psi.experiment.status'
        rank = 10

        StatusItem:
            label = 'Current trial'

            ProgressBar: pb_trial:
                name = 'dpoae_trial_pb'
                text_visible = True

        StatusItem:
            label = 'Trials '

            ProgressBar: pb_trials:
                name = 'dpoae_trials_pb'
                text_visible = True


def configure_dpoaeio_simple(event):
    context = event.workbench.get_plugin('psi.context')
    freq = context.get_parameter('f2_frequency')
    level = context.get_parameter('f2_level')
    for p in (freq, level):
        p.visible = False
        p.editable = False
        p.rove = True


def configure_dpoaeio_gui(event):
    ui = event.workbench.get_plugin('enaml.workbench.ui')
    pb_trials = ui.window.find('dpoae_trials_pb')
    pb_trial = ui.window.find('dpoae_trial_pb')

    context = event.workbench.get_plugin('psi.context')
    n_fft = context.get_value('n_fft')
    n_time = context.get_value('n_time')
    pb_trial.maximum = n_fft * n_time
    pb_trials.maximum = context.n_values()
    f2 = context.unique_values('secondary_tone_frequency')
    l1 = context.unique_values('primary_tone_level')
    l2 = context.unique_values('secondary_tone_level')
    levels = l1 | l2

    data = event.workbench.get_plugin('psi.data')
    vb = data.find_viewbox('dpoae_io_viewbox')
    pc = data.find_plot_container('dpoae_io_container')

    pc.x_min = min(levels) - 10
    pc.x_max = max(levels) + 10
    vb.y_min = min(vb.y_min, min(levels) - 10)
    vb.y_max = max(vb.y_max, max(levels) + 10)

    lb, ub = min(f2) / 1.2, max(f2) * 1.2
    pc = data.find_plot_container('dpoae_threshold_container')
    pc.freq_lb = lb
    pc.freq_ub = ub

    # This demonstrates how to modify a plugin that may or may not have been
    # loaded by the user.
    try:
        plugin = event.workbench.get_plugin('dpoae_microphone_fft_mixin')
        plugin.manifest.fft_freq_lb = lb
        plugin.manifest.fft_freq_ub = ub
    except ValueError:
        # Plugin is not registered
        pass


def configure_dpoaeio_experiment(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    core = event.workbench.get_plugin('enaml.workbench.core')

    primary_sf = {}
    secondary_sf = {}
    settings = list(context.iter_settings('default', 1))
    primary = controller.get_output('primary')
    secondary = controller.get_output('secondary')
    outputs = {
        primary: {
            'level': 'primary_tone_level',
            'frequency': 'primary_tone_frequency',
        },
        secondary: {
            'level': 'secondary_tone_level',
            'frequency': 'secondary_tone_frequency',
        },
    }
    good_settings, bad_settings = check_range(outputs, settings)

    if not good_settings:
        m = 'All requested settings exceed the maximum capabilities of the system.'
        raise ValueError(m)

    if bad_settings:
        error_summary = {}
        for setting in bad_settings:
            f2 = setting['secondary_tone_frequency']
            l2 = setting['secondary_tone_level']
            error_summary.setdefault(f2, []).append(l2)
        lines = []
        for f2 in sorted(error_summary.keys()):
            l2_str = ', '.join(str(l) for l in sorted(error_summary[f2]))
            lines.append(f'{f2} Hz: {l2_str}')
        mesg = f'Out of {len(settings)} settings, ' \
            f'{len(bad_settings)} exceed the maximum ' \
            f'capabilities of the system:\n{", ".join(lines)}'
        warning(None, 'Settings', mesg)

    selector = context.get_selector('actual')
    for setting in good_settings:
        selector.add_setting(setting)

    kwargs = {'selector': 'actual', 'cycles': 1}
    core.invoke_command('psi.context.initialize', kwargs)


enamldef DPOAEIOSimpleManifest(DPOAEIOBaseManifest): manifest:

    Extension:
        id = EXPERIMENT_SIMPLE + '.actions'
        point = 'psi.controller.actions'

        # These are a series of callbacks that customize the default
        # psiexperiment behavior so it works well with DPOAE experiments.
        # First, we need to configure the context to clearly mark what is 
        ExperimentAction:
            event = 'plugins_started'
            command = 'psi.controller.configure_plugins'
        ExperimentAction:
            event = 'context_initialized'
            command = 'psi.controller.configure_dpoae_gui'
        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_dpoae_experiment'

    Extension:
        id = EXPERIMENT_SIMPLE + '.commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.configure_plugins'
            handler = configure_dpoaeio_simple
        Command:
            id = 'psi.controller.configure_dpoae_gui'
            handler = configure_dpoaeio_gui
        Command:
            id = 'psi.controller.configure_dpoae_experiment'
            handler = configure_dpoaeio_experiment

    Extension:
        id = EXPERIMENT_SIMPLE + '.selectors'
        point = 'psi.context.selectors'

        CFTSSelector:
            # This is the selector shown in the GUI and will represent what the
            # user is hoping for.
            label = 'DPOAE stimuli'

        SequenceSelector:
            # This is a shadow selector that represents the actual set of
            # frequencies and levels to be tested after verifying the maximum
            # output of the system (using calibration).
            name = 'actual'
            show_widget = False
