import logging
log = logging.getLogger(__name__)

from enaml.workbench.api import Extension

from psiaudio.util import octave_space

from psi.context.api import (BoolParameter, ContextGroup, ContextRow,
                             FriendlyCartesianProduct, Parameter)
from psi.controller.api import Downsample, IIRFilter
from psi.controller.calibration.api import ToneCalibrate
from psi.core.enaml.api import ExperimentManifest
from psi.data.sinks.api import DisplayValue, BinaryStore

from ..core.io_mixins import ChannelInput, ChannelInputManifest, \
    QueuedEpochChannelOutput


################################################################################
# Simple frequency and level selectors
################################################################################
CONTEXT_ITEM_DETAIL = {
    # ABR and SAM/RAM EFR
    'target_tone_frequency': {
        'user_friendly_name': 'frequencies',
        'step_unit': 'octave',
        'unit': 'kHz',
        'order_user_managed': False,
        'transform_fn': lambda x: (x * 1e3).round(0),
        'inverse_transform_fn': lambda x: x * 1e-3,
        'round_values': True,
        'range_fn': octave_space,
    },
    'target_tone_level': {
        'user_friendly_name': 'levels',
        'step_unit': 'dB',
        'unit': 'dB SPL',
        'order_user_managed': True,
    },

    # SAM/RAM EFR
    'target_mod_fm': {
        'user_friendly_name': 'modulation frequencies',
        'step_unit': 'Hz',
        'unit': 'Hz',
        'order_user_managed': True,
    },

    # DPOAE
    'f2_frequency': {
        'user_friendly_name': 'F2 frequencies',
        'step_unit': 'octave',
        'unit': 'kHz',
        'order_user_managed': False,
        'transform_fn': lambda x: (x * 1e3).round(0),
        'inverse_transform_fn': lambda x: x * 1e-3,
        'round_values': True,
        'range_fn': octave_space,
    },
    'f2_level': {
        'user_friendly_name': 'levels',
        'step_unit': 'dB',
        'unit': 'dB SPL',
        'order_user_managed': True,
    },

    # MEMR
    'elicitor_bandlimited_noise_level': {
        'user_friendly_name': 'Elicitor level',
        'step_unit': 'dB',
        'unit': 'dB SPL',
    }
}


class CFTSSelector(FriendlyCartesianProduct):

    context_detail = CONTEXT_ITEM_DETAIL
    name = 'default'


enamldef TemperatureMixinManifest(ExperimentManifest): manifest:

    id = 'temperature_mixin'
    name = 'temperature'
    title = 'Temperature monitor'

    Extension:
        id = 'temperature_data'
        point = 'psi.data.sinks'

        BinaryStore:
            name = 'temperature_store'
            continuous_inputs = ['temperature']

        DisplayValue:
            name = 'temperature_display'
            label = 'Temperature'
            source_name = 'temperature_decimated'

    Extension:
        id = 'temperature_io'
        point = 'psi.controller.io'

        IIRFilter:
            source_name = 'temperature'
            f_lowpass = 0.5
            btype = 'lowpass'
            ftype = 'butter'
            N = 1

            Downsample:
                name = 'temperature_decimated'
                q = 500


################################################################################
# Hardware mixins
################################################################################
enamldef SpeakerOutput(QueuedEpochChannelOutput):
    name = 'target'
    label = 'Target'


enamldef PTMicrophoneInput(ChannelInput):
    name = 'microphone'
    label = 'Probe tube mic.'


enamldef EEGInput(ChannelInput):
    name = 'eeg'
    label = 'EEG'
    show_gain_setting = False

    IIRFilter:
        name = 'eeg_filtered'
        N = 2
        btype = 'bandpass'
        ftype = 'butter'
        passthrough = not C.digital_filter
        f_highpass = C.digital_highpass
        f_lowpass = C.digital_lowpass


enamldef EEGInputManifest(ChannelInputManifest): manifest:

    Extension:
        id = manifest.id + '.eeg.context'
        point = 'psi.context.items'

        ContextRow:
            fmt = ['Amplifier filter', hp, 'to', lp, 'Hz at', gain, 'âœ• gain']
            group_name = 'hardware_settings'

            Parameter: hp:
                name = 'amplifier_highpass'
                label = 'Amplifier highpass filter cutoff'
                default = 10
                scope = 'experiment'

            Parameter: lp:
                name = 'amplifier_lowpass'
                label = 'Amplifier lowpass filter cutoff'
                default = 10e3
                scope = 'experiment'
                group_name = 'hardware_settings'

            Parameter: gain:
                name = 'amplifier_gain'
                label = 'Amplifier gain'
                default = 100e3
                scope = 'experiment'
                group_name = 'hardware_settings'

        ContextRow:
            name = 'digital_filter_settings'
            fmt << ['Digital filter?', filt_on] \
                if filt_on.expression == 'False' else \
                ['Digital filter?', filt_on, 'from', filt_hp, 'to', filt_lp, 'Hz']
            group_name = 'acquisition'

            BoolParameter: filt_on:
                name = 'digital_filter'
                label = 'Digital filter?'
                scope = 'experiment'
                default = True

            Parameter: filt_hp:
                name = 'digital_highpass'
                label = 'Digital highpass filter cutoff'
                default = 300
                scope = 'experiment'

            Parameter: filt_lp:
                name = 'digital_lowpass'
                label = 'Digital lowpass filter cutoff'
                default = 3000
                scope = 'experiment'


################################################################################
# ABR and DPOAE calibration mixins
################################################################################
enamldef InEarCalibrationMixinManifest(ExperimentManifest): manifest:

    attr experiment
    attr outputs
    id = f'{experiment}_inear_calibration_mixin'
    name = f'{experiment}_inear_calibration'
    title = 'In-ear calibration'

    Extension:
        id = manifest.id + '.context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'inear_calibration'
            label = 'In-ear calibration settings'

            Parameter:
                name = 'calibration_gain'
                label = 'Gain (dB)'
                dtype = 'float'
                default = -30

    Extension:
        id = manifest.id + '.calibration'
        point = 'psi.controller.calibration.channels'

        ToneCalibrate:
            name = f'{experiment}_tone_calibration'
            label = 'Tone calibration'
            input_name = 'microphone'
            outputs << manifest.outputs
            gain << C.calibration_gain
            max_thd = None
            min_snr = 5
            duration = 0.1
            trim = 0.01
            iti = 0


enamldef ABRInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    experiment = 'abr'
    outputs = {'target': ['target_tone_frequency']}


enamldef DPOAEInEarCalibrationMixinManifest(InEarCalibrationMixinManifest): manifest:

    experiment = 'dpoae'
    outputs = {
        'primary': ['primary_tone_frequency'],
        'secondary': ['secondary_tone_frequency'],
    }


enamldef EFRInEarCalibrationManifest(InEarCalibrationMixinManifest): manifest:

    experiment = 'efr'
    outputs = {
        'primary': ['carrier_tone_frequency'],
    }
