import logging
log = logging.getLogger()

from functools import partial
import numpy as np

from enaml.application import deferred_call
from enaml.stdlib.message_box import question
from enaml.widgets.api import Action, DockItem, ToolBar
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psiaudio import queue
from psiaudio.util import interleave_octaves

from psi.context.api import (BoolParameter, ContextGroup, ContextRow,
                             EnumParameter, OrderedContextMeta, Parameter)

from psi.context.selector import CartesianProduct
from psi.controller.api import ExperimentAction
from psi.data.plots import (StackedEpochAveragePlot, TimeContainer, ViewBox)
from psi.data.sinks.api import GroupedEpochCounter


from .abr_base import ABRBaseManifest
from .cfts_mixins import CFTSSelector


EXPERIMENT = __name__.rsplit('.', 1)[-1]
EXPERIMENT_SIMPLE = __name__.rsplit('.', 1)[-1] + '_simple'


def add_setting(target, setting, averages, iti, key_map):
    key = target.add_setting(setting, averages, iti)
    freq = setting['target_tone_frequency']
    key_map.setdefault(freq, []).append(key)


def configure_experiment(key_map, event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    target = controller.get_output('target')

    ordering = context.get_value('ordering')
    alternate_polarity = context.get_value('alternate_polarity')
    averages = context.get_value('averages')

    rate = context.get_value('rate')
    tone_duration = context.get_value('target_tone_burst_duration')
    if alternate_polarity and (averages % 2):
        # Round to the nearest multiple of 2
        averages = (round(averages/2) + 1) * 2

    # Compensate for the tone duration. ITI is the time from tone offset to
    # tone offset. Do sanity check while at it.
    iti = 1/rate - tone_duration
    if iti <= 0:
        raise ValueError('Repetition rate is too fast')

    # Configure the queues
    if ordering == 'interleaved_ramp':
        target.queue = queue.InterleavedFIFOSignalQueue()
    elif ordering == 'interleaved_plateau':
        target.queue = queue.InterleavedFIFOSignalQueue()
    elif ordering == 'interleaved_random':
        target.queue = queue.BlockedRandomSignalQueue()
    elif ordering == 'sequential':
        if alternate_polarity:
            target.queue = queue.GroupedFIFOSignalQueue(group_size=2)
        else:
            target.queue = queue.FIFOSignalQueue()
    else:
        raise ValueError('Unrecognized ordering {}'.format(ordering))

    freq_name = 'target_tone_frequency'
    level_name = 'target_tone_level'
    settings = list(context.iter_settings('default', 1))
    frequencies = {s[freq_name] for s in settings}

    if ordering.startswith('interleaved'):
        int_freq = interleave_octaves(frequencies)
        sorters = {
            'interleaved_random': lambda a: (a[freq_name], a[level_name]),
            'interleaved_ramp': lambda a: (int_freq.index(a[freq_name]), a[level_name]),
            'interleaved_plateau': lambda a: (a[level_name], int_freq.index(a[freq_name])),
        }
        settings.sort(key=sorters[ordering])
    log.debug('Ordering %s', ordering)

    for s in settings:
        log.debug('%f\t%f', s[freq_name], s[level_name])

    key_map.clear()
    if not alternate_polarity:
        for setting in settings:
            add_setting(target, setting, averages, iti, key_map)
    elif ordering in ('interleaved_ramp', 'interleaved_plateau'):
        for setting in settings:
            setting['target_tone_polarity'] = 1
            add_setting(target, setting, averages/2, iti, key_map)
        for setting in settings:
            setting['target_tone_polarity'] = -1
            add_setting(target, setting, averages/2, iti, key_map)
    elif ordering in ('sequential', 'interleaved_random'):
        for setting in settings:
            setting['target_tone_polarity'] = 1
            add_setting(target, setting, averages/2, iti, key_map)
            setting['target_tone_polarity'] = -1
            add_setting(target, setting, averages/2, iti, key_map)
    else:
        raise ValueError('Unrecognized ordering {}'.format(ordering))

    # Now, identify the maximum level on a per-frequency setting
    max_level = {}
    for setting in settings:
        frequency = setting['target_tone_frequency']
        level = setting['target_tone_level']
        max_level[frequency] = max(level, max_level.get(frequency, -np.inf))

    # Then figure out the maximum scaling factor required for that level.
    # Multiply to convert from RMS to peak to peak and add 1% headroom.
    max_sf = {}
    for frequency, level in max_level.items():
        sf = target.calibration.get_sf(frequency, level)
        max_sf[frequency] = sf
    max_sf = max(max_sf.values()) * np.sqrt(2) * 1.01
    target.channel.expected_range = (-max_sf, max_sf)

    data = event.workbench.get_plugin('psi.data')
    counter = data.find_sink('valid_erp_counter')
    counter.requested_group_n = averages


def next_frequency(key_map, event):
    controller = event.workbench.get_plugin('psi.controller')
    output = controller.get_output('target')

    # Assume some delay in hitting the skip button. So, we want to search
    # back and find out what the frequency is. We should include some logic
    # to make sure that we don't accidentally skip a frequency that we just
    # started.
    ts = controller.get_ts()
    key = output.queue.get_closest_key(ts - 0.5)

    # Now, remove all keys that match the stimulus frequency from the
    # queue. This will clear all remaining levels for that frequency. We
    # may get an error indicating that key has already been removed
    # (possible if we are close to the number of averages needed for that
    # key).
    info = output.queue.get_info(key)
    frequency = info['metadata']['target_tone_frequency']
    log.debug('Frequency at %0.2f sec is %.0f Hz', ts, frequency)

    # Bounce back to main thread for confirmation dialog
    deferred_call(skip_keys, event, output, frequency, key_map[frequency])


def skip_keys(event, output, frequency, keys):
    ui = event.workbench.get_plugin('enaml.workbench.ui')

    m = f'Skip remaining levels for {frequency} Hz?'
    button = question(ui.window, 'Skip frequency', m)
    if button.text != 'Yes':
        return

    with output.engine.lock:
        for key in keys:
            try:
                output.queue.remove_key(key)
                log.debug('Removed key %r', key)
            except ValueError:
                log.debug('Key %r already removed', key)

    # Finally, flush the queue and update with new data. This needs to be
    # outside the lock block because `rebuffer` acquires the lock as well.
    rebuffer(event)


def rebuffer(event):
    controller = event.workbench.get_plugin('psi.controller')
    output = controller.get_output('target')
    with output.engine.lock:
        output.rebuffer(controller.get_ts() + 1.0)


enamldef ABRIOBaseManifest(ABRBaseManifest): manifest:

    attr key_map = {}

    Extension:
        id = EXPERIMENT + '.context'
        point = 'psi.context.items'

        OrderedContextMeta: epoch_groups:
            name = 'settings'

        ContextGroup:
            name = 'acquisition'
            label = 'Acquisition'

        ContextRow:
            name = 'averaging'
            group_name = 'acquisition'
            fmt = ['Average', averages, 'trials at', rate,
                   'per sec. and alternate polarity?', alt_pol]

            Parameter: averages:
                name = 'averages'
                label = 'Averages'
                default = 512
                scope = 'trial'

            Parameter: rate:
                name = 'rate'
                label = 'Reps. per sec.'
                default = 80
                scope = 'trial'

            BoolParameter: alt_pol:
                name = 'alternate_polarity'
                label = 'Alternate polarity?'
                default = True
                scope = 'experiment'

        EnumParameter:
            name = 'ordering'
            label = 'Stimulus ordering'
            choices = {
                'conventional': '"sequential"',
                'interleaved plateau': '"interleaved_plateau"',
                'interleaved ramp': '"interleaved_ramp"',
                'interleaved random': '"interleaved_random"',
            }
            scope = 'experiment'
            group_name = 'acquisition'

    Extension:
        id = EXPERIMENT + '.commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = EXPERIMENT + '.next_frequency'
            handler = partial(next_frequency, manifest.key_map)
        Command:
            id = EXPERIMENT + '.rebuffer'
            handler = rebuffer
        Command:
            id = 'psi.controller.configure_experiment'
            handler = partial(configure_experiment, manifest.key_map)

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'target_keys_complete'
            command = EXPERIMENT + '.rebuffer'

    Extension:
        id = EXPERIMENT + '.sink'
        point = 'psi.data.sinks'

        GroupedEpochCounter:
            name = 'valid_erp_counter'
            label = 'Valid ERPs acquired'
            source_name = 'valid_erp'
            output_name = 'target'
            groups << epoch_groups

    Extension:
        id = EXPERIMENT + '.plots'
        point = 'psi.data.plots'

        TimeContainer: time_container:
            label = 'ERP average'
            span = 8.5e-3
            allow_auto_select << C.ordering == 'sequential'
            fmt_button_cb << C.get_selector().get_formatter(plot.tab_grouping)

            ViewBox:
                name = 'erp_waterfall_viewbox'
                y_label = 'ABR amplitude'
                y_min = -5
                y_max = 5
                y_mode = 'mouse'
                save_limits = True

                StackedEpochAveragePlot: plot:
                    label = 'ERP average plot'
                    source_name = 'valid_erp'
                    n_update = 8
                    tab_grouping = C.get_names()[:-1]
                    plot_grouping = C.get_names()[-1:]
                    fmt_plot_label_cb << C.get_selector().get_formatter(plot_grouping)
                    pen_width = 2
                    pen_color_cycle = ['k']
                    tab_keys >> time_container.buttons
                    selected_tab := time_container.current_button
                    auto_select := time_container.auto_select

    Extension:
        id = EXPERIMENT + '.abr_io.toolbar'
        point = 'psi.experiment.toolbar'

        ToolBar:
            Action:
                text = 'Next freq.'
                enabled << workbench.get_plugin('psi.controller').experiment_state == 'running' \
                    and C.ordering == 'sequential'
                triggered ::
                    core = workbench.get_plugin('enaml.workbench.core')
                    core.invoke_command(EXPERIMENT + '.next_frequency')


enamldef ABRIOManifest(ABRIOBaseManifest): manifest:

    Extension:
        id = EXPERIMENT + '.selectors'
        point = 'psi.context.selectors'

        CartesianProduct:
            name = 'default'
            label = 'ABR sequence'


def configure_abrio_simple(event):
    context = event.workbench.get_plugin('psi.context')

    # Don't allow averages or rate to vary
    averages = context.get_parameter('averages')
    rate = context.get_parameter('rate')
    averages.scope = 'experiment'
    rate.scope = 'experiment'

    meta = context.get_meta('settings')
    meta.editable = False


enamldef ABRIOSimpleManifest(ABRIOBaseManifest): manifest:

    Extension:
        id = EXPERIMENT_SIMPLE + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'plugins_started'
            command = 'psi.controller.configure_plugins'

    Extension:
        id = EXPERIMENT_SIMPLE + '.commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.configure_plugins'
            handler = configure_abrio_simple

    Extension:
        id = EXPERIMENT_SIMPLE + '.selectors'
        point = 'psi.context.selectors'

        CFTSSelector:
            label = 'ABR stimuli'
            can_manage = ['target_tone_frequency', 'target_tone_level']
            user_managed = False
