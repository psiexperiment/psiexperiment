import logging
log = logging.getLogger(__name__)

from enaml.widgets.api import ProgressBar
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

import numpy as np

from psiaudio import util
from psiaudio.pipeline import coroutine
from psiaudio.queue import InterleavedFIFOSignalQueue

from psi.controller.api import (
    ControllerManifest, ExperimentEvent, ExtractEpochs,
    ExperimentAction, Input
)

from psi.context.api import BoolParameter, ContextGroup, Expression, Parameter
from psi.token.primitives import (
    Cos2Envelope, Gate, Repeat, SAMEnvelope, SquareWaveEnvelope, Tone
)
from psi.data.sinks.api import BinaryStore, EpochCounter, TextStore
from psi.data.api import (FFTContainer, GroupedEpochFFTPlot, PlotContainer,
                          ResultPlot, ViewBox)

from .cfts_mixins import CFTSSelector, EEGInput, PTMicrophoneInput, SpeakerOutput

EXPERIMENT = __name__.rsplit('.', 1)[-1]


def configure_experiment(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    data = event.workbench.get_plugin('psi.data')

    output = controller.get_output('target')
    max_level = {}
    for setting in context.iter_settings('default', 1):
        output.add_setting(setting, averages=1, iti_duration=1)
        frequency = setting['target_tone_frequency']
        level = setting['target_tone_level']
        max_level[frequency] = max(level, max_level.get(frequency, -np.inf))

    # Then figure out the maximum scaling factor required for that level.
    # Multiply to convert from RMS to peak to peak and add 1% headroom.
    max_sf = {}
    for frequency, level in max_level.items():
        sf = output.calibration.get_sf(frequency, level)
        max_sf[frequency] = sf
    max_sf = max(max_sf.values()) * np.sqrt(2) * 1.01 * 2
    output.channel.expected_range = (-max_sf, max_sf)

    # Set the EEG FFT to show only the modulation frequency
    fm_range = context.unique_values('target_mod_fm')
    eeg_fft = data.find_plot_container('eeg_fft_container')
    eeg_fft.freq_lb = min(fm_range) / 2
    eeg_fft.freq_ub = min(fm_range) * 2
    mic_segment_fft = data.find_plot_container('mic_segment_fft_container')
    mic_segment_fft.freq_lb = min(fm_range) / 2
    mic_segment_fft.freq_ub = min(fm_range) * 2

    # Set the microphone FFT to show the modulation frequency plus the upper
    # carrier frequency. This will allow us to scan for potential harmonics or
    # other artifacts in the microphone spectrum that may affect EEG.
    freq_range = context.unique_values('target_tone_frequency')
    mic_fft = data.find_plot_container('signal_fft_view_container')
    mic_fft.freq_lb = min(fm_range) / 1.2
    mic_fft.freq_ub = max(freq_range) * 1.2


enamldef BaseEFRManifest(ControllerManifest): manifest:

    attr selected_token

    Extension:
        id = EXPERIMENT + '.io'
        point = 'psi.controller.io'

        PTMicrophoneInput:
            ExtractEpochs: extract_mic:
                epoch_size = getattr(C, f'target_{selected_token}_duration')
                name = 'mic_segment'

        SpeakerOutput: output:
            name = 'target'
            queue = InterleavedFIFOSignalQueue()
            auto_decrement = True
            token << workbench.get_plugin('psi.token').get_token(selected_token)
            initialized ::
                self.queue.connect(extract_eeg.added_queue.append, 'added')
                self.queue.connect(extract_eeg.removed_queue.append, 'removed')
                self.queue.connect(extract_mic.added_queue.append, 'added')
                self.queue.connect(extract_mic.removed_queue.append, 'removed')

        EEGInput:
            ExtractEpochs: extract_eeg:
                epoch_size = getattr(C, f'target_{selected_token}_duration')
                name = 'erp'
                Input:
                    name = 'analyze_efr'

    Extension:
        id = EXPERIMENT + '.selectors'
        point = 'psi.context.selectors'

        CFTSSelector:
            label = 'EFR stimuli'
            user_managed = True
            can_manage = ['fm', 'fc', 'target_tone_level']

    Extension:
        id = EXPERIMENT + '.items'
        point = 'psi.context.items'

        ContextGroup:
            name = 'acquisition'
            label = 'Acquisition'

        ContextGroup:
            name = 'hardware_settings'
            label = 'Hardware'

    Extension:
        id = EXPERIMENT + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.configure_experiment'
            handler = configure_experiment

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentEvent:
            name = 'efr_acquired'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_experiment'
            weight = 11

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'engines_configured'
            command = 'target.start'
            kwargs = {'delay': 1}

        ExperimentAction:
            # The delay allows us to capture a little more data past the end of
            # the queue (useful for filtering, etc.).
            event = 'erp_queue_end'
            command = 'psi.controller.stop'
            delay = 1

    Extension:
        id = EXPERIMENT + '.data'
        point = 'psi.data.sinks'

        EpochCounter: counter:
            name = 'efr_counter'
            label = 'EFRs acquired'
            source_name = 'erp'
            output_name = 'target'

        TextStore:
            name = 'erp_metadata_store'
            epoch_inputs = ['analyze_efr', 'mic_segment']

        BinaryStore:
            name = 'continuous_store'
            continuous_inputs = ['microphone', 'eeg']

    Extension:
        id = EXPERIMENT + '.workspace'
        point = 'psi.experiment.status'
        rank = 10

    Extension:
        id = EXPERIMENT + '.plots'
        point = 'psi.data.plots'

        FFTContainer: fft_container:
            label = 'EEG FFT'
            name = 'eeg_fft_container'

            max_buttons = 4
            fmt_button_cb << \
                C.get_selector().get_formatter(fft_plot.tab_grouping)

            ViewBox:
                name = 'eeg_fft_viewbox'

                GroupedEpochFFTPlot: fft_plot:
                    name = 'eeg_fft_plot'
                    source_name = 'erp'
                    waveform_averages << int(duration / 1)

                    # TODO: This is pretty hackish ...
                    tab_grouping << C.get_names()
                    tab_keys >> fft_container.buttons
                    selected_tab := fft_container.current_button
                    auto_select := fft_container.auto_select

        FFTContainer: mic_segment_fft_container:
            label = 'Microphone segment FFT'
            name = 'mic_segment_fft_container'

            max_buttons = 4
            fmt_button_cb << \
                C.get_selector().get_formatter(fft_plot.tab_grouping)

            ViewBox:
                name = 'mic_segment_fft_viewbox'

                GroupedEpochFFTPlot: mic_segment_fft_plot:
                    name = 'mic_segment_fft_plot'
                    source_name = 'mic_segment'
                    waveform_averages << int(duration / 1)

                    # TODO: This is pretty hackish ...
                    tab_grouping << C.get_names()
                    tab_keys >> mic_segment_fft_container.buttons
                    selected_tab := mic_segment_fft_container.current_button
                    auto_select := mic_segment_fft_container.auto_select


enamldef SAMEFRManifest(BaseEFRManifest):

    selected_token = 'sam_tone'

    Extension:
        id = EXPERIMENT + '.tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: sam_target:
            name = 'sam_tone'
            label = 'SAM tone'
            hide = ['start_time']
            SAMEnvelope:
                hide = ['delay', 'direction']
                name = 'mod'
                Tone:
                    hide = ['polarity', 'phase']

    Extension:
        id = EXPERIMENT + '.context_SAM'
        point = 'psi.context.items'

        Parameter:
            name = 'duration'
            label = 'SAM tone duration (s)'
            default = 30
            group_name = 'target'

        Parameter:
            name = 'fm'
            label = 'SAM tone FM (Hz)'
            default = 110
            group_name = 'target'

        Parameter:
            name = 'fc'
            label = 'SAM tone FC (Hz)'
            default = 8e3
            group_name = 'target'

        Parameter:
            name = 'depth'
            label = 'SAM tone depth (frac.)'
            default = 1
            group_name = 'target'

        Expression:
            parameter = 'target_mod_fm'
            expression = 'fm'

        Expression:
            parameter = 'target_mod_depth'
            expression = 'depth'

        Expression:
            parameter = 'target_tone_frequency'
            expression = 'fc'

        Expression:
            parameter = 'target_sam_tone_duration'
            expression = 'duration'


enamldef RAMEFRManifest(BaseEFRManifest):

    selected_token = 'ram_tone'

    Extension:
        id = EXPERIMENT + '.tokens_RAM'
        point = 'psi.token.tokens'

        Gate:
            name = 'ram_tone'
            label = 'RAM tone'
            hide = ['start_time']
            SquareWaveEnvelope:
                name = 'mod'
                Tone:
                    hide = ['polarity', 'phase']


    Extension:
        id = EXPERIMENT + '.context_RAM'
        point = 'psi.context.items'

        BoolParameter:
            name = 'coerce_samples'
            label = 'Coerce FC and duty cycle?'
            default = True
            group_name = 'target'

        Parameter:
            name = 'duration'
            label = 'RAM tone duration (s)'
            default = 30
            group_name = 'target'

        Parameter:
            name = 'fm'
            label = 'RAM tone FM (Hz)'
            default = 110
            group_name = 'target'

        Parameter:
            name = 'fc'
            label = 'RAM tone FC (Hz)'
            default = 8e3
            group_name = 'target'

        Parameter:
            name = 'duty_cycle'
            label = 'RAM tone duty cycle (frac.)'
            default = 0.25
            group_name = 'target'

        Expression:
            parameter = 'target_tone_phase'
            expression = '-np.pi/2'

        Expression:
            parameter = 'target_mod_fm'
            #expression = 'fs("target") / round(fs("target") / fm)'
            expression = 'fm'

        Expression:
            parameter = 'target_mod_duty_cycle'
            expression = '(round(duty_cycle * target_tone_frequency) / target_tone_frequency) if coerce_samples else duty_cycle'

        Expression:
            parameter = 'target_tone_frequency'
            expression = '(target_mod_fm * round(fc / target_mod_fm)) if coerce_samples else fc'

        Expression:
            parameter = 'target_ram_tone_duration'
            expression = 'duration'

