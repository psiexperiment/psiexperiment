import logging
log = logging.getLogger(__name__)

from enaml.widgets.api import ProgressBar
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

import numpy as np

from psiaudio import util
from psiaudio.pipeline import coroutine
from psiaudio.queue import InterleavedFIFOSignalQueue

from psi.controller.api import (ControllerManifest, Coroutine, ExperimentEvent,
                                ExtractEpochs, ExperimentAction, Input)

from psi.context.api import ContextGroup
from psi.experiment.api import StatusItem
from psi.token.primitives import Cos2Envelope, Gate, SAMEnvelope, SquareWaveEnvelope, Tone
from psi.data.sinks.api import EpochCounter, TextStore
from psi.data.api import (FFTContainer, GroupedEpochFFTPlot, PlotContainer,
                          ResultPlot, ViewBox)

from .cfts_mixins import CFTSSelector, EEGInput, PTMicrophoneInput, SpeakerOutput

EXPERIMENT = __name__.rsplit('.', 1)[-1]


def configure_experiment(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    data = event.workbench.get_plugin('psi.data')

    output = controller.get_output('target')
    max_level = {}
    for setting in context.iter_settings('default', 1):
        output.add_setting(setting, averages=1, iti_duration=1)
        frequency = setting['target_tone_frequency']
        level = setting['target_tone_level']
        max_level[frequency] = max(level, max_level.get(frequency, -np.inf))

    # Then figure out the maximum scaling factor required for that level.
    # Multiply to convert from RMS to peak to peak and add 1% headroom.
    max_sf = {}
    for frequency, level in max_level.items():
        sf = output.calibration.get_sf(frequency, level)
        max_sf[frequency] = sf
    max_sf = max(max_sf.values()) * np.sqrt(2) * 1.01 * 2
    log.info(max_sf)
    output.channel.expected_range = (-max_sf, max_sf)

    counter = data.find_sink('efr_counter')
    counter.requested_n = output.queue.count_requested_trials()

    names = context.get_names()
    pc = data.find_plot_container('efr_io_container')
    pc.x_min, pc.x_max = context.get_range(names[-1])


@coroutine
def analyze_efr(token, fs, target):
    if token == 'sam_tone':
        harmonics = np.arange(1, 2)
    elif token == 'ram_tone':
        harmonics = np.arange(1, 7)
    else:
        raise ValueError(f'Unrecognized token type "{token}"')

    while True:
        for epoch in (yield):
            md = epoch.metadata.copy()
            new_epoch = epoch.copy()
            epoch = np.asarray(epoch)

            frequencies = md['target_mod_fm'] * harmonics
            averages = int(round(md['duration'] / 100e-3))
            signal = epoch.reshape((averages, -1))
            psd = util.psd_df(signal, fs).mean(axis=0)

            md['efr_amplitude'] = util.db(psd.loc[frequencies].sum())
            new_epoch.metadata = md
            target(new_epoch)


enamldef BaseEFRManifest(ControllerManifest): manifest:

    attr selected_token

    Extension:
        id = EXPERIMENT + '.tokens'
        point = 'psi.token.tokens'

        Cos2Envelope: sam_target:
            name = 'sam_tone'
            label = 'SAM tone'
            hide = ['start_time']
            SAMEnvelope:
                hide = ['delay', 'direction']
                name = 'mod'
                Tone:
                    hide = ['polarity', 'phase']

        Gate:
            name = 'ram_tone'
            label = 'RAM tone'
            hide = ['start_time']
            SquareWaveEnvelope:
                name = 'mod'
                Tone:
                    hide = ['polarity', 'phase']

    Extension:
        id = EXPERIMENT + '.io'
        point = 'psi.controller.io'

        PTMicrophoneInput:
            pass

        SpeakerOutput: output:
            queue = InterleavedFIFOSignalQueue()
            auto_decrement = True
            token << workbench.get_plugin('psi.token').get_token(selected_token)
            initialized ::
                self.queue.connect(extract.added_queue.append, 'added')
                self.queue.connect(extract.removed_queue.append, 'removed')

        EEGInput:
            ExtractEpochs: extract:
                epoch_size = getattr(C, f'target_{selected_token}_duration')
                name = 'erp'
                Coroutine:
                    name = 'analyze_efr'
                    args = (selected_token, self.fs,)
                    coroutine = analyze_efr

    Extension:
        id = EXPERIMENT + '.selectors'
        point = 'psi.context.selectors'

        CFTSSelector:
            label = 'EFR stimuli'

    Extension:
        id = EXPERIMENT + '.items'
        point = 'psi.context.items'

        ContextGroup:
            name = 'acquisition'
            label = 'Acquisition'

    Extension:
        id = EXPERIMENT + '.commands'
        point = 'enaml.workbench.core.commands'

        Command:
            id = 'psi.controller.configure_experiment'
            handler = configure_experiment

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentEvent:
            name = 'efr_acquired'

        ExperimentAction:
            event = 'experiment_prepare'
            command = 'psi.controller.configure_experiment'
            weight = 11

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'engines_configured'
            command = 'target.start'
            kwargs = {'delay': 0.5}

        ExperimentAction:
            event = 'erp_queue_end'
            command = 'psi.controller.stop'

    Extension:
        id = EXPERIMENT + '.data'
        point = 'psi.data.sinks'

        EpochCounter: counter:
            name = 'efr_counter'
            label = 'EFRs acquired'
            source_name = 'erp'

        TextStore:
            name = 'erp_metadata_store'
            epoch_inputs = ['analyze_efr']

    Extension:
        id = EXPERIMENT + '.workspace'
        point = 'psi.experiment.status'
        rank = 10

    Extension:
        id = EXPERIMENT + '.plots'
        point = 'psi.data.plots'

        PlotContainer: pc:
            name = 'efr_io_container'
            label = 'EFR input-output functions'

            fmt_button_cb << \
                C.get_selector().get_formatter(efr_plot.tab_grouping)

            ViewBox: vb:
                name = 'efr_io_viewbox'
                y_mode = 'mouse'
                save_limits = True

                ResultPlot: efr_plot:
                    name = 'efr_io_amplitude_plot'
                    source_name = 'analyze_efr'
                    x_column << C.get_names()[-1]
                    y_column = 'efr_amplitude'
                    pen_width = 2

                    tab_grouping << C.get_names()[:-1]
                    tab_keys >> pc.buttons
                    selected_tab := pc.current_button
                    auto_select := pc.auto_select

        FFTContainer: fft_container:
            label = 'EEG FFT'
            name = 'eeg_fft_container'

            fmt_button_cb << \
                C.get_selector().get_formatter(fft_plot.tab_grouping)

            ViewBox:
                name = 'eeg_fft_viewbox'

                GroupedEpochFFTPlot: fft_plot:
                    name = 'eeg_fft_plot'
                    source_name = 'erp'
                    waveform_averages << int(duration / 100e-3)

                    # TODO: This is pretty hackish ...
                    tab_grouping << C.get_names()
                    tab_keys >> fft_container.buttons
                    selected_tab := fft_container.current_button
                    auto_select := fft_container.auto_select


enamldef SAMEFRManifest(BaseEFRManifest):

    selected_token = 'sam_tone'


enamldef RAMEFRManifest(BaseEFRManifest):

    selected_token = 'ram_tone'
