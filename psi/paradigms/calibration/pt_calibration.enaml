import logging
log = logging.getLogger(__name__)

from functools import partial

import numpy as np
from scipy import signal
from palettable.colorbrewer import qualitative
import itertools
import pandas as pd

from enaml.application import deferred_call
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import (ContextGroup, EnumParameter, OrderedContextMeta,
                             Parameter, SequenceSelector)

from psi.controller.api import ExperimentAction

from psiaudio.queue import FIFOSignalQueue
from psiaudio.util import (psd, psd_freq, db, dbi, golay_pair, summarize_golay,
                           golay_tf, octave_space)

from psi.controller.api import (ControllerManifest, ExtractEpochs, Input,
                                get_hw_ao_choices, QueuedEpochOutput)

from psi.controller.calibration.tone import tone_sens

from psi.token.primitives import Chirp

from psi.data.sinks.api import BinaryStore, EpochCounter, TextStore

from psi.data.plots import (EpochTimeContainer, ChannelPlot,
                            GroupedEpochAveragePlot, ChannelPlot, ViewBox,
                            FFTContainer, GroupedEpochFFTPlot)

from psiaudio.calibration import FlatCalibration, InterpCalibration


from .calibration_mixins import ChirpMixin, GolayMixin, level_to_gain

#from ..cfts.cfts_mixins import CalMicrophoneInput, CFTSSelector, EEGInput, PTMicrophoneInput
from ..core.io_mixins import ChannelInput


def calculate_sens(workbench, grouping, filename, calc_sens):
    log.error('*******************************************************')
    log.error('Computing SPL for Golay')
    log.error('*******************************************************')
    core = workbench.get_plugin('enaml.workbench.core')
    context = workbench.get_plugin('psi.context')
    data = workbench.get_plugin('psi.data')

    pt_source = data.find_sink('mic_data').get_source('pt_microphone')
    cal_source = data.find_sink('mic_data').get_source('cal_microphone')
    epoch_info = data.find_sink('cal_data').get_source('cal_epoch')

    duration = epoch_info.iloc[0].loc['epoch_size']
    pt_df = pt_source.get_epochs(epoch_info, offset=0, duration=duration,
                                 columns=grouping)
    cal_df = cal_source.get_epochs(epoch_info, offset=0, duration=duration,
                                   columns=grouping)

    pt_grouped = pt_df.groupby(grouping)
    cal_grouped = cal_df.groupby(grouping)
    groups = sorted(pt_grouped.groups.keys())

    n = max(3, len(groups))
    cmap_name = 'Dark2_{}'.format(n)
    cmap = getattr(qualitative, cmap_name)
    colors = itertools.cycle(cmap.colors)

    summaries = []
    keys = []
    for key, color in zip(groups, colors):
        name = '{}'.format(key)
        log.error(pt_grouped.get_group(key))
        sens_summary = calc_sens(
            pt_source.fs,
            pt_grouped.get_group(key).values,
            cal_grouped.get_group(key).values,
            color,
            context,
            data,
            name
        )
        sens_summary = pd.DataFrame(sens_summary)
        sens_summary.set_index('frequency', inplace=True)
        summaries.append(sens_summary)
        keys.append(key)

    result = pd.concat(summaries, keys=keys, names=grouping)
    parameters = {'name': filename, 'dataframe': result}
    core.invoke_command('calibration_data.save_dataframe', parameters=parameters)
    return result


def calculate_sens_chirp(event):
    result = calculate_sens(event.workbench, ['hw_ao_chirp_level'],
                            'chirp_sens', calculate_group_sens_chirp)
    max_gain = result.index.get_level_values('hw_ao_chirp_level').max()
    validate_sens(event, result.loc[max_gain].reset_index())


def calculate_sens_golay(event):
    result = calculate_sens(event.workbench, ['n_bits', 'output_gain'],
                            'golay_sens', calculate_group_sens_golay)
    max_n = result.index.get_level_values('n_bits').max()
    max_gain = result.index.get_level_values('output_gain').max()
    validate_sens(event, result.loc[max_n, max_gain].reset_index())


def calculate_group_sens_chirp(fs, pt_waveform, cal_waveform, color, context,
                               data, name):

    cal_mic_sens = context.get_value('cal_mic_sens_mv') * 1e-3
    smoothing_window = context.get_value('smoothing_window')

    freq = psd_freq(pt_waveform, fs)
    pt_psd = np.mean(psd(pt_waveform, fs), axis=0)
    cal_psd = np.mean(psd(cal_waveform, fs), axis=0)
    sens = db(pt_psd) + db(cal_mic_sens) - db(cal_psd)

    if smoothing_window > 0:
        w = signal.hamming(smoothing_window)
        w /= w.sum()
        sens = np.convolve(sens, w, mode='same')

    pt_summary = {
        'frequency': freq,
        'psd': pt_psd,
    }

    cal_summary = {
        'frequency': freq,
        'psd': cal_psd,
    }

    sens_summary = {
        'frequency': freq,
        'sens': sens,
        #'phase': phase,
    }

    def plot_data(data=data, pt_summary=pt_summary, cal_summary=cal_summary,
                  sens_summary=sens_summary, color=color, name=name):
        vb = data.find_viewbox('pt_fft')
        vb.plot(pt_summary['frequency'], db(pt_summary['psd']), color,
                log_x=True)
        vb = data.find_viewbox('cal_fft')
        vb.plot(cal_summary['frequency'], db(cal_summary['psd']), color,
                log_x=True)
        vb = data.find_viewbox('sens')
        vb.plot(sens_summary['frequency'], sens_summary['sens'], color,
                log_x=True, label=name)

    deferred_call(plot_data)
    return sens_summary


def calculate_group_sens_golay(fs, pt_waveform, cal_waveform, color, context,
                               data, name):
    n_bits = context.get_value('n_bits')
    n_fft = context.get_value('fft_averages')
    n_waveforms = context.get_value('waveform_averages')
    n_discard = context.get_value('discard')
    cal_mic_sens = context.get_value('cal_mic_sens_mv') * 1e-3
    smoothing_window = context.get_value('smoothing_window')

    a, b = golay_pair(n_bits)

    n = n_waveforms * n_fft + n_discard

    pt_a, pt_b = pt_waveform[n_discard:n], pt_waveform[n+n_discard:]
    pt_summary = summarize_golay(fs, a, b, pt_a, pt_b, n_waveforms)

    cal_a, cal_b = cal_waveform[n_discard:n], cal_waveform[n+n_discard:]
    cal_summary = summarize_golay(fs, a, b, cal_a, cal_b, n_waveforms)

    pt_psd = pt_summary['psd']
    cal_psd = cal_summary['psd']
    pt_phase = pt_summary['phase']
    cal_phase = cal_summary['phase']

    # divide cal mic volts by cal mic sens (in V/Pa) to get pascals
    pa = db(cal_psd) - db(cal_mic_sens)
    # cal units should be dB(Pa/20e-6/V)
    sens = pa - db(20e-6) - db(pt_psd)
    phase = pt_phase - cal_phase

    if smoothing_window > 0:
        w = signal.hamming(smoothing_window)
        w /= w.sum()
        sens = np.convolve(sens, w, mode='same')
        phase = np.convolve(phase, w, mode='same')

    sens_summary = {
        'frequency': pt_summary['frequency'],
        'sens': sens,
        'phase': phase,
    }

    def plot_data(data=data, pt_summary=pt_summary, cal_summary=cal_summary,
                  sens_summary=sens_summary, color=color, name=name):
        vb = data.find_viewbox('pt_fft')
        vb.plot(pt_summary['frequency'], db(pt_summary['psd']), color,
                log_x=True)
        vb = data.find_viewbox('cal_fft')
        vb.plot(cal_summary['frequency'], db(cal_summary['psd']), color,
                log_x=True)
        vb = data.find_viewbox('sens')
        vb.plot(sens_summary['frequency'], sens_summary['sens'], color,
                log_x=True, label=name)

    deferred_call(plot_data)
    return sens_summary


def validate_sens(event, sens):
    controller = event.workbench.get_plugin('psi.controller')
    context = event.workbench.get_plugin('psi.context')
    data = event.workbench.get_plugin('psi.data')
    core = event.workbench.get_plugin('enaml.workbench.core')

    output_channel = context.get_value('output_channel')
    pt_channel = context.get_value('pt_microphone_channel')
    cal_channel = context.get_value('cal_microphone_channel')
    cal_mic_sens_mv = context.get_value('cal_mic_sens_mv')
    cal_mic_sens = cal_mic_sens_mv*1e-3

    ao = controller.get_channel(output_channel)
    pt_ai = controller.get_channel(pt_channel)
    pt_ai.calibration = FlatCalibration.from_mv_pa(cal_mic_sens_mv)
    cal_ai = controller.get_channel(cal_channel)
    cal_ai.calibration = InterpCalibration(sens['frequency'], sens['sens'])

    validation_level = context.get_value('validation_level')
    safe_gain = context.get_value('safe_gain')
    freq_lb = context.get_value('validation_start')
    freq_ub = context.get_value('validation_end')
    octaves = context.get_value('validation_octaves')

    frequencies = octave_space(freq_lb*1e-3, freq_ub*1e-3, octaves,
                               'bounded')*1e3
    log.debug('Validating calibration by targeting %f dB SPL', validation_level)
    #frequencies, gains = level_to_gain(ao.calibration, frequencies,
    #                                   validation_level, safe_gain)
    if len(frequencies) == 0:
        log.error('No frequencies available to calibrate. Please review target SPL.')
        return

    # TODO: NEED TO ORDER CHANNELS!
    ai_channels = [cal_ai.name, pt_ai.name]
    result = tone_sens(ao.engine,
                       frequencies,
                       gains=-30,
                       ao_channel_name=output_channel,
                       ai_channel_names=ai_channels)
    rms = result['rms'].unstack('channel_name')
    pt_rms = rms[pt_ai.name]
    cal_rms = rms[cal_ai.name]
    sens = db(cal_rms) - db(cal_mic_sens) - db(20e-6) - db(pt_rms)

    def plot_data(data=data, sens=sens):
        vb = data.find_viewbox('sens')
        vb.plot(sens.index, sens.values, log_x=True, kind='scatter')

    deferred_call(plot_data)
    parameters = {'name': 'tone_sensitivity', 'dataframe': result}
    core.invoke_command('calibration_data.save_dataframe', parameters=parameters)


enamldef BasePTCalibrationManifest(ControllerManifest): manifest:

    Extension:
        id = 'data'
        point = 'psi.data.sinks'

        BinaryStore:
            name = 'mic_data'
            continuous_inputs = ['pt_microphone', 'cal_microphone']

        TextStore:
            name = 'cal_data'
            epoch_inputs = ['cal_epoch']

        EpochCounter: counter:
            name = 'epoch_counter'
            label = 'Trials acquired'
            source_name = 'pt_epoch'
            output_name = 'hw_ao'

    Extension:
        id = 'io'
        point = 'psi.controller.io'

        ChannelInput:
            name = 'pt_microphone'
            label = 'Probe tube microphone'
            ExtractEpochs:
                name = 'pt_epoch'

        ChannelInput:
            name = 'cal_microphone'
            label = 'Calibration microphone'
            ExtractEpochs:
                name = 'cal_epoch'

    Extension:
        id = 'context'
        point = 'psi.context.items'

        ContextGroup:
            name = 'hardware_settings'
            label = 'Hardware'

        ContextGroup:
            name = 'calibration'
            label = 'Calibration'

            EnumParameter:
                name = 'output_channel'
                label = 'Output channel'
                compact_label = 'ao'
                choices << get_hw_ao_choices(workbench)
                scope = 'experiment'

            Parameter:
                name = 'cal_mic_sens_mv'
                label = 'Calibration microphone sensitivity (mV/Pa)'
                default = 0.0
                scope = 'experiment'

            Parameter:
                name = 'input_range'
                label = 'Expected input range (Vpp)'
                compact_label = 'ai_range'
                dtype = 'float64'
                default = 10
                scope = 'experiment'

    Extension:
        id = 'selectors'
        point = 'psi.context.selectors'

        SequenceSelector:
            name = 'default'
            label = 'Sequence'

    Extension:
        id = 'actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'pt_epoch_queue_end'
            command = 'psi.controller.stop'

        ExperimentAction:
            event = 'experiment_start'
            command = 'hw_ao.start'
            kwargs = {'delay': 1}
            weight = 60

    Extension:
        id = 'plots'
        point = 'psi.data.plots'

        EpochTimeContainer:
            name = 'epoch_container_signal'
            label = 'Epoch average (signal)'
            span = 0.01
            name = 'epoch_container'

            ViewBox:
                y_min = -0.1
                y_max = 0.1
                y_label = 'PT mic. signal (V)'
                name = 'pt_epoch_view'

                GroupedEpochAveragePlot:
                    label = 'PT epoch average plot'
                    source_name = 'pt_epoch'
                    pen_color_cycle = ['black', 'red']
                    plot_grouping << C.get_names()

            ViewBox:
                y_min = -0.01
                y_max = 0.01
                y_label = 'Cal. mic. signal (V)'
                name = 'cal_epoch_view'

                GroupedEpochAveragePlot:
                    label = 'Cal. epoch average plot'
                    source_name = 'cal_epoch'
                    pen_color_cycle = ['black', 'red']
                    plot_grouping << C.get_names()

        FFTContainer:
            name = 'calibration_result'
            label = 'Calibration result'
            freq_lb = 50.0
            freq_ub = 50000

            ViewBox:
                y_min = -160
                y_max = -50
                name = 'pt_fft'
                y_label = 'Probe tube PSD (dB re 1V)'

            ViewBox:
                y_min = -160
                y_max = -50
                name = 'cal_fft'
                y_label = 'Calibration mic. PSD (dB re 1V)'

            ViewBox:
                name = 'sens'
                y_label = 'Probe tube sens (V/Pa)'


enamldef PTGolayMixin(GolayMixin): manifest:

    extract_epoch_inputs = ['pt_epoch', 'cal_epoch']
    cleanup_cb = calculate_sens_golay


enamldef PTChirpMixin(ChirpMixin): manifest:

    extract_epoch_inputs = ['pt_epoch', 'cal_epoch']
    #cleanup_cb = calculate_sens_golay
