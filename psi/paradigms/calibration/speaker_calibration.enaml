import logging
log = logging.getLogger(__name__)

from enaml.workbench.api import Extension

from psi.context.api import ContextGroup, OrderedContextMeta, SequenceSelector

from psi.controller.api import (ControllerManifest, ExperimentAction,
                                ExtractEpochs, Input)

from psi.data.sinks.api import BinaryStore, TextStore

from psi.data.plots import (EpochTimeContainer,
                            GroupedEpochAveragePlot,
                            ViewBox,
                            FFTContainer,
                            GroupedEpochFFTPlot,
                            GroupedEpochPhasePlot)

from psi.data.sinks.api import EpochCounter


EXPERIMENT = 'base_speaker_calibration'


enamldef BaseSpeakerCalibrationManifest(ControllerManifest): manifest:

    Extension:
        id = EXPERIMENT + '.data'
        point = 'psi.data.sinks'

        BinaryStore:
            name = 'mic_data'
            continuous_inputs = ['hw_ai']

        TextStore:
            name = 'cal_data'
            epoch_inputs = ['epoch']

    Extension:
        id = EXPERIMENT + '.io'
        point = 'psi.controller.io'

        Input:
            name = 'hw_ai'
            source_name = 'system_microphone'
            ExtractEpochs: extract:
                name = 'epoch'

    Extension:
        id = EXPERIMENT + '.context'
        point = 'psi.context.items'

        ContextGroup:
            label = 'Hardware'
            name = 'hardware_settings'

        OrderedContextMeta: epoch_group:
            name = 'epoch_group'
            label = 'Epoch groups'

    Extension:
        id = EXPERIMENT + '.selectors'
        point = 'psi.context.selectors'

        SequenceSelector:
            name = 'default'
            label = 'Sequence'

    Extension:
        id = EXPERIMENT + '.actions'
        point = 'psi.controller.actions'

        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': 'default', 'cycles': 1}

        ExperimentAction:
            event = 'experiment_start'
            command = 'hw_ao.start'
            kwargs = {'delay': 1}
            weight = 60

        ExperimentAction:
            event = 'epoch_queue_end'
            command = 'psi.controller.stop'

    Extension:
        id = EXPERIMENT + '.sink'
        point = 'psi.data.sinks'

        EpochCounter:
            name = 'epoch_counter'
            source_name = 'epoch'
            output_name = 'hw_ao'

    Extension:
        id = EXPERIMENT + '.plots'
        point = 'psi.data.plots'

        EpochTimeContainer:
            name = 'epoch_container'
            label = 'Signal'

            ViewBox:
                name = 'epoch_time_viewbox'
                y_label = 'Signal (V)'
                save_limits = True

                GroupedEpochAveragePlot: ea_plot:
                    name = 'epoch_average'
                    source_name = 'epoch'
                    pen_color_cycle = 'palettable.cartocolors.qualitative.Bold_10'
                    plot_grouping << [g.name for g in epoch_group.values]

        FFTContainer:
            name = 'calibration_result'
            label = 'Speaker calibration'
            freq_lb = 50.0
            freq_ub = 50000

            ViewBox:
                name = 'spl_result'
                y_label = 'Speaker output (dB SPL)'
                save_limits = True

            ViewBox:
                name = 'sens_result'
                y_label = 'Speaker sensitivity (dB SPL/V)'
                save_limits = True

        FFTContainer:
            name = 'epoch_psd_container'
            label = 'PSD'
            freq_lb = 50.0
            freq_ub = 50000

            ViewBox:
                name = 'epoch_psd_viewbox'
                save_limits = True
                y_label = 'Signal (dB re 1V)'

                GroupedEpochFFTPlot:
                    name = 'epoch_psd_average'
                    apply_calibration = False
                    source_name = 'epoch'
                    pen_color_cycle := ea_plot.pen_color_cycle
                    plot_grouping = [g.name for g in epoch_group.values]

        FFTContainer:
            name = 'epoch_phase_container'
            label = 'Phase'
            freq_lb = 50.0
            freq_ub = 50000

            ViewBox:
                name = 'epoch_phase_viewbox'
                y_label = 'Unwrapped phase (radians)'
                y_min = 100
                y_max = -800
                save_limits = True

                GroupedEpochPhasePlot:
                    unwrap = True
                    name = 'epoch_phase_average_unwrap'
                    source_name = 'epoch'
                    pen_color_cycle := ea_plot.pen_color_cycle
                    plot_grouping = [g.name for g in epoch_group.values]
